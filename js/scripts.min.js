var slidebars;
!function(a) {
  slidebars = function() {
    var b = a("[canvas]");
    var c = {};
    var d = false;
    var e$$0 = false;
    var f = ["top", "right", "bottom", "left"];
    var g = ["reveal", "push", "overlay", "shift"];
    var h = function(d) {
      var e = a();
      var f = "0px, 0px";
      var g = 1E3 * parseFloat(c[d].element.css("transitionDuration"), 10);
      return "reveal" !== c[d].style && ("push" !== c[d].style && "shift" !== c[d].style) || (e = e.add(b)), "push" !== c[d].style && ("overlay" !== c[d].style && "shift" !== c[d].style) || (e = e.add(c[d].element)), c[d].active && ("top" === c[d].side ? f = "0px, " + c[d].element.css("height") : "right" === c[d].side ? f = "-" + c[d].element.css("width") + ", 0px" : "bottom" === c[d].side ? f = "0px, -" + c[d].element.css("height") : "left" === c[d].side && (f = c[d].element.css("width") + ", 0px")),
      {
        elements : e,
        amount : f,
        duration : g
      };
    };
    var i = function(a, b, d, e) {
      if (j(a)) {
        throw "Error registering Slidebar, a Slidebar with id '" + a + "' already exists.";
      }
      c[a] = {
        id : a,
        side : b,
        style : d,
        element : e,
        active : false
      };
    };
    var j = function(a) {
      return!!c.hasOwnProperty(a);
    };
    this.init = function(b$$0) {
      if (d) {
        throw "Slidebars has already been initialized.";
      }
      if (!e$$0) {
        a("[off-canvas]").each(function() {
          var b = a(this).attr("off-canvas").split(" ", 3);
          if (!b || (!b[0] || (f.indexOf(b[1]) === -1 || g.indexOf(b[2]) === -1))) {
            throw "Error registering Slidebar, please specifiy a valid id, side and style'.";
          }
          i(b[0], b[1], b[2], a(this));
        });
        e$$0 = true;
      }
      d = true;
      this.css();
      a(k).trigger("init");
      if ("function" == typeof b$$0) {
        b$$0();
      }
    };
    this.exit = function(b) {
      if (!d) {
        throw "Slidebars hasn't been initialized.";
      }
      var c = function() {
        d = false;
        a(k).trigger("exit");
        if ("function" == typeof b) {
          b();
        }
      };
      if (this.getActiveSlidebar()) {
        this.close(c);
      } else {
        c();
      }
    };
    this.css = function(b) {
      if (!d) {
        throw "Slidebars hasn't been initialized.";
      }
      var e;
      for (e in c) {
        if (j(e)) {
          var f;
          f = "top" === c[e].side || "bottom" === c[e].side ? c[e].element.css("height") : c[e].element.css("width");
          if (!("push" !== c[e].style && ("overlay" !== c[e].style && "shift" !== c[e].style))) {
            c[e].element.css("margin-" + c[e].side, "-" + f);
          }
        }
      }
      if (this.getActiveSlidebar()) {
        this.open(this.getActiveSlidebar());
      }
      a(k).trigger("css");
      if ("function" == typeof b) {
        b();
      }
    };
    this.open = function(b, e) {
      if (!d) {
        throw "Slidebars hasn't been initialized.";
      }
      if (!b || !j(b)) {
        throw "Error opening Slidebar, there is no Slidebar with id '" + b + "'.";
      }
      var f = function() {
        c[b].active = true;
        c[b].element.css("display", "block");
        a(k).trigger("opening", [c[b].id]);
        var d = h(b);
        d.elements.css({
          "transition-duration" : d.duration + "ms",
          transform : "translate(" + d.amount + ")"
        });
        setTimeout(function() {
          a(k).trigger("opened", [c[b].id]);
          if ("function" == typeof e) {
            e();
          }
        }, d.duration);
      };
      if (this.getActiveSlidebar() && this.getActiveSlidebar() !== b) {
        this.close(f);
      } else {
        f();
      }
    };
    this.close = function(b, e) {
      if ("function" == typeof b && (e = b, b = null), !d) {
        throw "Slidebars hasn't been initialized.";
      }
      if (b && !j(b)) {
        throw "Error closing Slidebar, there is no Slidebar with id '" + b + "'.";
      }
      if (b || (b = this.getActiveSlidebar()), b && c[b].active) {
        c[b].active = false;
        a(k).trigger("closing", [c[b].id]);
        var f = h(b);
        f.elements.css("transform", "");
        setTimeout(function() {
          f.elements.css("transition-duration", "");
          c[b].element.css("display", "");
          a(k).trigger("closed", [c[b].id]);
          if ("function" == typeof e) {
            e();
          }
        }, f.duration);
      }
    };
    this.toggle = function(a, b) {
      if (!d) {
        throw "Slidebars hasn't been initialized.";
      }
      if (!a || !j(a)) {
        throw "Error toggling Slidebar, there is no Slidebar with id '" + a + "'.";
      }
      if (c[a].active) {
        this.close(a, function() {
          if ("function" == typeof b) {
            b();
          }
        });
      } else {
        this.open(a, function() {
          if ("function" == typeof b) {
            b();
          }
        });
      }
    };
    this.isActive = function(a) {
      return d;
    };
    this.isActiveSlidebar = function(a) {
      if (!d) {
        throw "Slidebars hasn't been initialized.";
      }
      if (!a) {
        throw "You must provide a Slidebar id.";
      }
      if (!j(a)) {
        throw "Error retrieving Slidebar, there is no Slidebar with id '" + a + "'.";
      }
      return c[a].active;
    };
    this.getActiveSlidebar = function() {
      if (!d) {
        throw "Slidebars hasn't been initialized.";
      }
      var a = false;
      var b;
      for (b in c) {
        if (j(b) && c[b].active) {
          a = c[b].id;
          break;
        }
      }
      return a;
    };
    this.getSlidebars = function() {
      if (!d) {
        throw "Slidebars hasn't been initialized.";
      }
      var a = [];
      var b;
      for (b in c) {
        if (j(b)) {
          a.push(c[b].id);
        }
      }
      return a;
    };
    this.getSlidebar = function(a) {
      if (!d) {
        throw "Slidebars hasn't been initialized.";
      }
      if (!a) {
        throw "You must pass a Slidebar id.";
      }
      if (!a || !j(a)) {
        throw "Error retrieving Slidebar, there is no Slidebar with id '" + a + "'.";
      }
      return c[a];
    };
    this.events = {};
    var k = this.events;
    a(window).on("resize", this.css.bind(this));
  };
}(jQuery);
!function(a) {
  if ("function" == typeof define && define.amd) {
    define(["jquery"], a);
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = a(require("jquery"));
    } else {
      a(jQuery);
    }
  }
}(function(a$$0) {
  var b$$1 = Array.prototype.slice;
  var c$$0 = Array.prototype.splice;
  var d$$0 = {
    topSpacing : 0,
    bottomSpacing : 0,
    className : "is-sticky",
    wrapperClassName : "sticky-wrapper",
    center : false,
    getWidthFrom : "",
    widthFromWrapper : true,
    responsiveWidth : false,
    zIndex : "auto"
  };
  var e$$0 = a$$0(window);
  var f$$0 = a$$0(document);
  var g = [];
  var h$$0 = e$$0.height();
  var i$$0 = function() {
    var b = e$$0.scrollTop();
    var c = f$$0.height();
    var d = c - h$$0;
    var i = b > d ? d - b : 0;
    var j = 0;
    var k = g.length;
    for (;j < k;j++) {
      var l = g[j];
      var m = l.stickyWrapper.offset().top;
      var n = m - l.topSpacing - i;
      if (l.stickyWrapper.css("height", l.stickyElement.outerHeight()), b <= n) {
        if (null !== l.currentTop) {
          l.stickyElement.css({
            width : "",
            position : "",
            top : "",
            "z-index" : ""
          });
          l.stickyElement.parent().removeClass(l.className);
          l.stickyElement.trigger("sticky-end", [l]);
          l.currentTop = null;
        }
      } else {
        var o = c - l.stickyElement.outerHeight() - l.topSpacing - l.bottomSpacing - b - i;
        if (o < 0 ? o += l.topSpacing : o = l.topSpacing, l.currentTop !== o) {
          var p;
          if (l.getWidthFrom) {
            p = a$$0(l.getWidthFrom).width() || null;
          } else {
            if (l.widthFromWrapper) {
              p = l.stickyWrapper.width();
            }
          }
          if (null == p) {
            p = l.stickyElement.width();
          }
          l.stickyElement.css("width", p).css("position", "fixed").css("top", o).css("z-index", l.zIndex);
          l.stickyElement.parent().addClass(l.className);
          if (null === l.currentTop) {
            l.stickyElement.trigger("sticky-start", [l]);
          } else {
            l.stickyElement.trigger("sticky-update", [l]);
          }
          if (l.currentTop === l.topSpacing && l.currentTop > o || null === l.currentTop && o < l.topSpacing) {
            l.stickyElement.trigger("sticky-bottom-reached", [l]);
          } else {
            if (null !== l.currentTop) {
              if (o === l.topSpacing) {
                if (l.currentTop < o) {
                  l.stickyElement.trigger("sticky-bottom-unreached", [l]);
                }
              }
            }
          }
          l.currentTop = o;
        }
        var q = l.stickyWrapper.parent();
        var r = l.stickyElement.offset().top + l.stickyElement.outerHeight() >= q.offset().top + q.outerHeight() && l.stickyElement.offset().top <= l.topSpacing;
        if (r) {
          l.stickyElement.css("position", "absolute").css("top", "").css("bottom", 0).css("z-index", "");
        } else {
          l.stickyElement.css("position", "fixed").css("top", o).css("bottom", "").css("z-index", l.zIndex);
        }
      }
    }
  };
  var j$$0 = function() {
    h$$0 = e$$0.height();
    var b = 0;
    var c = g.length;
    for (;b < c;b++) {
      var d = g[b];
      var f = null;
      if (d.getWidthFrom) {
        if (d.responsiveWidth) {
          f = a$$0(d.getWidthFrom).width();
        }
      } else {
        if (d.widthFromWrapper) {
          f = d.stickyWrapper.width();
        }
      }
      if (null != f) {
        d.stickyElement.css("width", f);
      }
    }
  };
  var k$$0 = {
    init : function(b$$0) {
      var c = a$$0.extend({}, d$$0, b$$0);
      return this.each(function() {
        var b = a$$0(this);
        var e = b.attr("id");
        var f = e ? e + "-" + d$$0.wrapperClassName : d$$0.wrapperClassName;
        var h = a$$0("<div></div>").attr("id", f).addClass(c.wrapperClassName);
        b.wrapAll(function() {
          if (0 == a$$0(this).parent("#" + f).length) {
            return h;
          }
        });
        var i = b.parent();
        if (c.center) {
          i.css({
            width : b.outerWidth(),
            marginLeft : "auto",
            marginRight : "auto"
          });
        }
        if ("right" === b.css("float")) {
          b.css({
            float : "none"
          }).parent().css({
            float : "right"
          });
        }
        c.stickyElement = b;
        c.stickyWrapper = i;
        c.currentTop = null;
        g.push(c);
        k$$0.setWrapperHeight(this);
        k$$0.setupChangeListeners(this);
      });
    },
    setWrapperHeight : function(b) {
      var c = a$$0(b);
      var d = c.parent();
      if (d) {
        d.css("height", c.outerHeight());
      }
    },
    setupChangeListeners : function(a) {
      if (window.MutationObserver) {
        var b$$0 = new window.MutationObserver(function(b) {
          if (b[0].addedNodes.length || b[0].removedNodes.length) {
            k$$0.setWrapperHeight(a);
          }
        });
        b$$0.observe(a, {
          subtree : true,
          childList : true
        });
      } else {
        a.addEventListener("DOMNodeInserted", function() {
          k$$0.setWrapperHeight(a);
        }, false);
        a.addEventListener("DOMNodeRemoved", function() {
          k$$0.setWrapperHeight(a);
        }, false);
      }
    },
    update : i$$0,
    unstick : function(b$$0) {
      return this.each(function() {
        var b = this;
        var d = a$$0(b);
        var e = -1;
        var f = g.length;
        for (;f-- > 0;) {
          if (g[f].stickyElement.get(0) === b) {
            c$$0.call(g, f, 1);
            e = f;
          }
        }
        if (e !== -1) {
          d.unwrap();
          d.css({
            width : "",
            position : "",
            top : "",
            float : "",
            "z-index" : ""
          });
        }
      });
    }
  };
  if (window.addEventListener) {
    window.addEventListener("scroll", i$$0, false);
    window.addEventListener("resize", j$$0, false);
  } else {
    if (window.attachEvent) {
      window.attachEvent("onscroll", i$$0);
      window.attachEvent("onresize", j$$0);
    }
  }
  a$$0.fn.sticky = function(c) {
    return k$$0[c] ? k$$0[c].apply(this, b$$1.call(arguments, 1)) : "object" != typeof c && c ? void a$$0.error("Method " + c + " does not exist on jQuery.sticky") : k$$0.init.apply(this, arguments);
  };
  a$$0.fn.unstick = function(c) {
    return k$$0[c] ? k$$0[c].apply(this, b$$1.call(arguments, 1)) : "object" != typeof c && c ? void a$$0.error("Method " + c + " does not exist on jQuery.sticky") : k$$0.unstick.apply(this, arguments);
  };
  a$$0(function() {
    setTimeout(i$$0, 0);
  });
});
!function(a) {
  if ("function" == typeof define && define.amd) {
    define(["jquery"], a);
  } else {
    if ("undefined" != typeof exports) {
      module.exports = a(require("jquery"));
    } else {
      a(jQuery);
    }
  }
}(function(a$$0) {
  var b$$1 = window.Slick || {};
  b$$1 = function() {
    function c$$1(c$$0, d) {
      var f;
      var e = this;
      e.defaults = {
        accessibility : true,
        adaptiveHeight : false,
        appendArrows : a$$0(c$$0),
        appendDots : a$$0(c$$0),
        arrows : true,
        asNavFor : null,
        prevArrow : '<button type="button" data-role="none" class="slick-prev" aria-label="Previous" tabindex="0" role="button">Previous</button>',
        nextArrow : '<button type="button" data-role="none" class="slick-next" aria-label="Next" tabindex="0" role="button">Next</button>',
        autoplay : false,
        autoplaySpeed : 3E3,
        centerMode : false,
        centerPadding : "50px",
        cssEase : "ease",
        customPaging : function(b, c) {
          return a$$0('<button type="button" data-role="none" role="button" tabindex="0" />').text(c + 1);
        },
        dots : false,
        dotsClass : "slick-dots",
        draggable : true,
        easing : "linear",
        edgeFriction : 0.35,
        fade : false,
        focusOnSelect : false,
        infinite : true,
        initialSlide : 0,
        lazyLoad : "ondemand",
        mobileFirst : false,
        pauseOnHover : true,
        pauseOnFocus : true,
        pauseOnDotsHover : false,
        respondTo : "window",
        responsive : null,
        rows : 1,
        rtl : false,
        slide : "",
        slidesPerRow : 1,
        slidesToShow : 1,
        slidesToScroll : 1,
        speed : 500,
        swipe : true,
        swipeToSlide : false,
        touchMove : true,
        touchThreshold : 5,
        useCSS : true,
        useTransform : true,
        variableWidth : false,
        vertical : false,
        verticalSwiping : false,
        waitForAnimate : true,
        zIndex : 1E3
      };
      e.initials = {
        animating : false,
        dragging : false,
        autoPlayTimer : null,
        currentDirection : 0,
        currentLeft : null,
        currentSlide : 0,
        direction : 1,
        $dots : null,
        listWidth : null,
        listHeight : null,
        loadIndex : 0,
        $nextArrow : null,
        $prevArrow : null,
        slideCount : null,
        slideWidth : null,
        $slideTrack : null,
        $slides : null,
        sliding : false,
        slideOffset : 0,
        swipeLeft : null,
        $list : null,
        touchObject : {},
        transformsEnabled : false,
        unslicked : false
      };
      a$$0.extend(e, e.initials);
      e.activeBreakpoint = null;
      e.animType = null;
      e.animProp = null;
      e.breakpoints = [];
      e.breakpointSettings = [];
      e.cssTransitions = false;
      e.focussed = false;
      e.interrupted = false;
      e.hidden = "hidden";
      e.paused = true;
      e.positionProp = null;
      e.respondTo = null;
      e.rowCount = 1;
      e.shouldClick = true;
      e.$slider = a$$0(c$$0);
      e.$slidesCache = null;
      e.transformType = null;
      e.transitionType = null;
      e.visibilityChange = "visibilitychange";
      e.windowWidth = 0;
      e.windowTimer = null;
      f = a$$0(c$$0).data("slick") || {};
      e.options = a$$0.extend({}, e.defaults, d, f);
      e.currentSlide = e.options.initialSlide;
      e.originalSettings = e.options;
      if ("undefined" != typeof document.mozHidden) {
        e.hidden = "mozHidden";
        e.visibilityChange = "mozvisibilitychange";
      } else {
        if ("undefined" != typeof document.webkitHidden) {
          e.hidden = "webkitHidden";
          e.visibilityChange = "webkitvisibilitychange";
        }
      }
      e.autoPlay = a$$0.proxy(e.autoPlay, e);
      e.autoPlayClear = a$$0.proxy(e.autoPlayClear, e);
      e.autoPlayIterator = a$$0.proxy(e.autoPlayIterator, e);
      e.changeSlide = a$$0.proxy(e.changeSlide, e);
      e.clickHandler = a$$0.proxy(e.clickHandler, e);
      e.selectHandler = a$$0.proxy(e.selectHandler, e);
      e.setPosition = a$$0.proxy(e.setPosition, e);
      e.swipeHandler = a$$0.proxy(e.swipeHandler, e);
      e.dragHandler = a$$0.proxy(e.dragHandler, e);
      e.keyHandler = a$$0.proxy(e.keyHandler, e);
      e.instanceUid = b$$0++;
      e.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;
      e.registerBreakpoints();
      e.init(true);
    }
    var b$$0 = 0;
    return c$$1;
  }();
  b$$1.prototype.activateADA = function() {
    var a = this;
    a.$slideTrack.find(".slick-active").attr({
      "aria-hidden" : "false"
    }).find("a, input, button, select").attr({
      tabindex : "0"
    });
  };
  b$$1.prototype.addSlide = b$$1.prototype.slickAdd = function(b$$0, c$$0, d) {
    var e = this;
    if ("boolean" == typeof c$$0) {
      d = c$$0;
      c$$0 = null;
    } else {
      if (0 > c$$0 || c$$0 >= e.slideCount) {
        return false;
      }
    }
    e.unload();
    if ("number" == typeof c$$0) {
      if (0 === c$$0 && 0 === e.$slides.length) {
        a$$0(b$$0).appendTo(e.$slideTrack);
      } else {
        if (d) {
          a$$0(b$$0).insertBefore(e.$slides.eq(c$$0));
        } else {
          a$$0(b$$0).insertAfter(e.$slides.eq(c$$0));
        }
      }
    } else {
      if (d === true) {
        a$$0(b$$0).prependTo(e.$slideTrack);
      } else {
        a$$0(b$$0).appendTo(e.$slideTrack);
      }
    }
    e.$slides = e.$slideTrack.children(this.options.slide);
    e.$slideTrack.children(this.options.slide).detach();
    e.$slideTrack.append(e.$slides);
    e.$slides.each(function(b, c) {
      a$$0(c).attr("data-slick-index", b);
    });
    e.$slidesCache = e.$slides;
    e.reinit();
  };
  b$$1.prototype.animateHeight = function() {
    var a = this;
    if (1 === a.options.slidesToShow && (a.options.adaptiveHeight === true && a.options.vertical === false)) {
      var b = a.$slides.eq(a.currentSlide).outerHeight(true);
      a.$list.animate({
        height : b
      }, a.options.speed);
    }
  };
  b$$1.prototype.animateSlide = function(b, c) {
    var d = {};
    var e = this;
    e.animateHeight();
    if (e.options.rtl === true) {
      if (e.options.vertical === false) {
        b = -b;
      }
    }
    if (e.transformsEnabled === false) {
      if (e.options.vertical === false) {
        e.$slideTrack.animate({
          left : b
        }, e.options.speed, e.options.easing, c);
      } else {
        e.$slideTrack.animate({
          top : b
        }, e.options.speed, e.options.easing, c);
      }
    } else {
      if (e.cssTransitions === false) {
        if (e.options.rtl === true) {
          e.currentLeft = -e.currentLeft;
        }
        a$$0({
          animStart : e.currentLeft
        }).animate({
          animStart : b
        }, {
          duration : e.options.speed,
          easing : e.options.easing,
          step : function(a) {
            a = Math.ceil(a);
            if (e.options.vertical === false) {
              d[e.animType] = "translate(" + a + "px, 0px)";
              e.$slideTrack.css(d);
            } else {
              d[e.animType] = "translate(0px," + a + "px)";
              e.$slideTrack.css(d);
            }
          },
          complete : function() {
            if (c) {
              c.call();
            }
          }
        });
      } else {
        e.applyTransition();
        b = Math.ceil(b);
        if (e.options.vertical === false) {
          d[e.animType] = "translate3d(" + b + "px, 0px, 0px)";
        } else {
          d[e.animType] = "translate3d(0px," + b + "px, 0px)";
        }
        e.$slideTrack.css(d);
        if (c) {
          setTimeout(function() {
            e.disableTransition();
            c.call();
          }, e.options.speed);
        }
      }
    }
  };
  b$$1.prototype.getNavTarget = function() {
    var b = this;
    var c = b.options.asNavFor;
    return c && (null !== c && (c = a$$0(c).not(b.$slider))), c;
  };
  b$$1.prototype.asNavFor = function(b) {
    var c$$0 = this;
    var d = c$$0.getNavTarget();
    if (null !== d) {
      if ("object" == typeof d) {
        d.each(function() {
          var c = a$$0(this).slick("getSlick");
          if (!c.unslicked) {
            c.slideHandler(b, true);
          }
        });
      }
    }
  };
  b$$1.prototype.applyTransition = function(a) {
    var b = this;
    var c = {};
    if (b.options.fade === false) {
      c[b.transitionType] = b.transformType + " " + b.options.speed + "ms " + b.options.cssEase;
    } else {
      c[b.transitionType] = "opacity " + b.options.speed + "ms " + b.options.cssEase;
    }
    if (b.options.fade === false) {
      b.$slideTrack.css(c);
    } else {
      b.$slides.eq(a).css(c);
    }
  };
  b$$1.prototype.autoPlay = function() {
    var a = this;
    a.autoPlayClear();
    if (a.slideCount > a.options.slidesToShow) {
      a.autoPlayTimer = setInterval(a.autoPlayIterator, a.options.autoplaySpeed);
    }
  };
  b$$1.prototype.autoPlayClear = function() {
    var a = this;
    if (a.autoPlayTimer) {
      clearInterval(a.autoPlayTimer);
    }
  };
  b$$1.prototype.autoPlayIterator = function() {
    var a = this;
    var b = a.currentSlide + a.options.slidesToScroll;
    if (!a.paused) {
      if (!a.interrupted) {
        if (!a.focussed) {
          if (a.options.infinite === false) {
            if (1 === a.direction && a.currentSlide + 1 === a.slideCount - 1) {
              a.direction = 0;
            } else {
              if (0 === a.direction) {
                b = a.currentSlide - a.options.slidesToScroll;
                if (a.currentSlide - 1 === 0) {
                  a.direction = 1;
                }
              }
            }
          }
          a.slideHandler(b);
        }
      }
    }
  };
  b$$1.prototype.buildArrows = function() {
    var b = this;
    if (b.options.arrows === true) {
      b.$prevArrow = a$$0(b.options.prevArrow).addClass("slick-arrow");
      b.$nextArrow = a$$0(b.options.nextArrow).addClass("slick-arrow");
      if (b.slideCount > b.options.slidesToShow) {
        b.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");
        b.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex");
        if (b.htmlExpr.test(b.options.prevArrow)) {
          b.$prevArrow.prependTo(b.options.appendArrows);
        }
        if (b.htmlExpr.test(b.options.nextArrow)) {
          b.$nextArrow.appendTo(b.options.appendArrows);
        }
        if (b.options.infinite !== true) {
          b.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
        }
      } else {
        b.$prevArrow.add(b.$nextArrow).addClass("slick-hidden").attr({
          "aria-disabled" : "true",
          tabindex : "-1"
        });
      }
    }
  };
  b$$1.prototype.buildDots = function() {
    var c;
    var d;
    var b = this;
    if (b.options.dots === true && b.slideCount > b.options.slidesToShow) {
      b.$slider.addClass("slick-dotted");
      d = a$$0("<ul />").addClass(b.options.dotsClass);
      c = 0;
      for (;c <= b.getDotCount();c += 1) {
        d.append(a$$0("<li />").append(b.options.customPaging.call(this, b, c)));
      }
      b.$dots = d.appendTo(b.options.appendDots);
      b.$dots.find("li").first().addClass("slick-active").attr("aria-hidden", "false");
    }
  };
  b$$1.prototype.buildOut = function() {
    var b$$0 = this;
    b$$0.$slides = b$$0.$slider.children(b$$0.options.slide + ":not(.slick-cloned)").addClass("slick-slide");
    b$$0.slideCount = b$$0.$slides.length;
    b$$0.$slides.each(function(b, c) {
      a$$0(c).attr("data-slick-index", b).data("originalStyling", a$$0(c).attr("style") || "");
    });
    b$$0.$slider.addClass("slick-slider");
    b$$0.$slideTrack = 0 === b$$0.slideCount ? a$$0('<div class="slick-track"/>').appendTo(b$$0.$slider) : b$$0.$slides.wrapAll('<div class="slick-track"/>').parent();
    b$$0.$list = b$$0.$slideTrack.wrap('<div aria-live="polite" class="slick-list"/>').parent();
    b$$0.$slideTrack.css("opacity", 0);
    if (b$$0.options.centerMode === true || b$$0.options.swipeToSlide === true) {
      b$$0.options.slidesToScroll = 1;
    }
    a$$0("img[data-lazy]", b$$0.$slider).not("[src]").addClass("slick-loading");
    b$$0.setupInfinite();
    b$$0.buildArrows();
    b$$0.buildDots();
    b$$0.updateDots();
    b$$0.setSlideClasses("number" == typeof b$$0.currentSlide ? b$$0.currentSlide : 0);
    if (b$$0.options.draggable === true) {
      b$$0.$list.addClass("draggable");
    }
  };
  b$$1.prototype.buildRows = function() {
    var b;
    var c;
    var d;
    var e;
    var f;
    var g;
    var h;
    var a = this;
    if (e = document.createDocumentFragment(), g = a.$slider.children(), a.options.rows > 1) {
      h = a.options.slidesPerRow * a.options.rows;
      f = Math.ceil(g.length / h);
      b = 0;
      for (;f > b;b++) {
        var i = document.createElement("div");
        c = 0;
        for (;c < a.options.rows;c++) {
          var j = document.createElement("div");
          d = 0;
          for (;d < a.options.slidesPerRow;d++) {
            var k = b * h + (c * a.options.slidesPerRow + d);
            if (g.get(k)) {
              j.appendChild(g.get(k));
            }
          }
          i.appendChild(j);
        }
        e.appendChild(i);
      }
      a.$slider.empty().append(e);
      a.$slider.children().children().children().css({
        width : 100 / a.options.slidesPerRow + "%",
        display : "inline-block"
      });
    }
  };
  b$$1.prototype.checkResponsive = function(b, c) {
    var e;
    var f;
    var g;
    var d = this;
    var h = false;
    var i = d.$slider.width();
    var j = window.innerWidth || a$$0(window).width();
    if ("window" === d.respondTo ? g = j : "slider" === d.respondTo ? g = i : "min" === d.respondTo && (g = Math.min(j, i)), d.options.responsive && (d.options.responsive.length && null !== d.options.responsive)) {
      f = null;
      for (e in d.breakpoints) {
        if (d.breakpoints.hasOwnProperty(e)) {
          if (d.originalSettings.mobileFirst === false) {
            if (g < d.breakpoints[e]) {
              f = d.breakpoints[e];
            }
          } else {
            if (g > d.breakpoints[e]) {
              f = d.breakpoints[e];
            }
          }
        }
      }
      if (null !== f) {
        if (null !== d.activeBreakpoint) {
          if (f !== d.activeBreakpoint || c) {
            d.activeBreakpoint = f;
            if ("unslick" === d.breakpointSettings[f]) {
              d.unslick(f);
            } else {
              d.options = a$$0.extend({}, d.originalSettings, d.breakpointSettings[f]);
              if (b === true) {
                d.currentSlide = d.options.initialSlide;
              }
              d.refresh(b);
            }
            h = f;
          }
        } else {
          d.activeBreakpoint = f;
          if ("unslick" === d.breakpointSettings[f]) {
            d.unslick(f);
          } else {
            d.options = a$$0.extend({}, d.originalSettings, d.breakpointSettings[f]);
            if (b === true) {
              d.currentSlide = d.options.initialSlide;
            }
            d.refresh(b);
          }
          h = f;
        }
      } else {
        if (null !== d.activeBreakpoint) {
          d.activeBreakpoint = null;
          d.options = d.originalSettings;
          if (b === true) {
            d.currentSlide = d.options.initialSlide;
          }
          d.refresh(b);
          h = f;
        }
      }
      if (!b) {
        if (!(h === false)) {
          d.$slider.trigger("breakpoint", [d, h]);
        }
      }
    }
  };
  b$$1.prototype.changeSlide = function(b, c) {
    var f;
    var g;
    var h;
    var d = this;
    var e = a$$0(b.currentTarget);
    switch(e.is("a") && b.preventDefault(), e.is("li") || (e = e.closest("li")), h = d.slideCount % d.options.slidesToScroll !== 0, f = h ? 0 : (d.slideCount - d.currentSlide) % d.options.slidesToScroll, b.data.message) {
      case "previous":
        g = 0 === f ? d.options.slidesToScroll : d.options.slidesToShow - f;
        if (d.slideCount > d.options.slidesToShow) {
          d.slideHandler(d.currentSlide - g, false, c);
        }
        break;
      case "next":
        g = 0 === f ? d.options.slidesToScroll : f;
        if (d.slideCount > d.options.slidesToShow) {
          d.slideHandler(d.currentSlide + g, false, c);
        }
        break;
      case "index":
        var i = 0 === b.data.index ? 0 : b.data.index || e.index() * d.options.slidesToScroll;
        d.slideHandler(d.checkNavigable(i), false, c);
        e.children().trigger("focus");
        break;
      default:
        return;
    }
  };
  b$$1.prototype.checkNavigable = function(a) {
    var c;
    var d;
    var b = this;
    if (c = b.getNavigableIndexes(), d = 0, a > c[c.length - 1]) {
      a = c[c.length - 1];
    } else {
      var e;
      for (e in c) {
        if (a < c[e]) {
          a = d;
          break;
        }
        d = c[e];
      }
    }
    return a;
  };
  b$$1.prototype.cleanUpEvents = function() {
    var b = this;
    if (b.options.dots) {
      if (null !== b.$dots) {
        a$$0("li", b.$dots).off("click.slick", b.changeSlide).off("mouseenter.slick", a$$0.proxy(b.interrupt, b, true)).off("mouseleave.slick", a$$0.proxy(b.interrupt, b, false));
      }
    }
    b.$slider.off("focus.slick blur.slick");
    if (b.options.arrows === true) {
      if (b.slideCount > b.options.slidesToShow) {
        if (b.$prevArrow) {
          b.$prevArrow.off("click.slick", b.changeSlide);
        }
        if (b.$nextArrow) {
          b.$nextArrow.off("click.slick", b.changeSlide);
        }
      }
    }
    b.$list.off("touchstart.slick mousedown.slick", b.swipeHandler);
    b.$list.off("touchmove.slick mousemove.slick", b.swipeHandler);
    b.$list.off("touchend.slick mouseup.slick", b.swipeHandler);
    b.$list.off("touchcancel.slick mouseleave.slick", b.swipeHandler);
    b.$list.off("click.slick", b.clickHandler);
    a$$0(document).off(b.visibilityChange, b.visibility);
    b.cleanUpSlideEvents();
    if (b.options.accessibility === true) {
      b.$list.off("keydown.slick", b.keyHandler);
    }
    if (b.options.focusOnSelect === true) {
      a$$0(b.$slideTrack).children().off("click.slick", b.selectHandler);
    }
    a$$0(window).off("orientationchange.slick.slick-" + b.instanceUid, b.orientationChange);
    a$$0(window).off("resize.slick.slick-" + b.instanceUid, b.resize);
    a$$0("[draggable!=true]", b.$slideTrack).off("dragstart", b.preventDefault);
    a$$0(window).off("load.slick.slick-" + b.instanceUid, b.setPosition);
    a$$0(document).off("ready.slick.slick-" + b.instanceUid, b.setPosition);
  };
  b$$1.prototype.cleanUpSlideEvents = function() {
    var b = this;
    b.$list.off("mouseenter.slick", a$$0.proxy(b.interrupt, b, true));
    b.$list.off("mouseleave.slick", a$$0.proxy(b.interrupt, b, false));
  };
  b$$1.prototype.cleanUpRows = function() {
    var b;
    var a = this;
    if (a.options.rows > 1) {
      b = a.$slides.children().children();
      b.removeAttr("style");
      a.$slider.empty().append(b);
    }
  };
  b$$1.prototype.clickHandler = function(a) {
    var b = this;
    if (b.shouldClick === false) {
      a.stopImmediatePropagation();
      a.stopPropagation();
      a.preventDefault();
    }
  };
  b$$1.prototype.destroy = function(b) {
    var c = this;
    c.autoPlayClear();
    c.touchObject = {};
    c.cleanUpEvents();
    a$$0(".slick-cloned", c.$slider).detach();
    if (c.$dots) {
      c.$dots.remove();
    }
    if (c.$prevArrow) {
      if (c.$prevArrow.length) {
        c.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");
        if (c.htmlExpr.test(c.options.prevArrow)) {
          c.$prevArrow.remove();
        }
      }
    }
    if (c.$nextArrow) {
      if (c.$nextArrow.length) {
        c.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", "");
        if (c.htmlExpr.test(c.options.nextArrow)) {
          c.$nextArrow.remove();
        }
      }
    }
    if (c.$slides) {
      c.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function() {
        a$$0(this).attr("style", a$$0(this).data("originalStyling"));
      });
      c.$slideTrack.children(this.options.slide).detach();
      c.$slideTrack.detach();
      c.$list.detach();
      c.$slider.append(c.$slides);
    }
    c.cleanUpRows();
    c.$slider.removeClass("slick-slider");
    c.$slider.removeClass("slick-initialized");
    c.$slider.removeClass("slick-dotted");
    c.unslicked = true;
    if (!b) {
      c.$slider.trigger("destroy", [c]);
    }
  };
  b$$1.prototype.disableTransition = function(a) {
    var b = this;
    var c = {};
    c[b.transitionType] = "";
    if (b.options.fade === false) {
      b.$slideTrack.css(c);
    } else {
      b.$slides.eq(a).css(c);
    }
  };
  b$$1.prototype.fadeSlide = function(a, b) {
    var c = this;
    if (c.cssTransitions === false) {
      c.$slides.eq(a).css({
        zIndex : c.options.zIndex
      });
      c.$slides.eq(a).animate({
        opacity : 1
      }, c.options.speed, c.options.easing, b);
    } else {
      c.applyTransition(a);
      c.$slides.eq(a).css({
        opacity : 1,
        zIndex : c.options.zIndex
      });
      if (b) {
        setTimeout(function() {
          c.disableTransition(a);
          b.call();
        }, c.options.speed);
      }
    }
  };
  b$$1.prototype.fadeSlideOut = function(a) {
    var b = this;
    if (b.cssTransitions === false) {
      b.$slides.eq(a).animate({
        opacity : 0,
        zIndex : b.options.zIndex - 2
      }, b.options.speed, b.options.easing);
    } else {
      b.applyTransition(a);
      b.$slides.eq(a).css({
        opacity : 0,
        zIndex : b.options.zIndex - 2
      });
    }
  };
  b$$1.prototype.filterSlides = b$$1.prototype.slickFilter = function(a) {
    var b = this;
    if (null !== a) {
      b.$slidesCache = b.$slides;
      b.unload();
      b.$slideTrack.children(this.options.slide).detach();
      b.$slidesCache.filter(a).appendTo(b.$slideTrack);
      b.reinit();
    }
  };
  b$$1.prototype.focusHandler = function() {
    var b = this;
    b.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick", "*:not(.slick-arrow)", function(c) {
      c.stopImmediatePropagation();
      var d = a$$0(this);
      setTimeout(function() {
        if (b.options.pauseOnFocus) {
          b.focussed = d.is(":focus");
          b.autoPlay();
        }
      }, 0);
    });
  };
  b$$1.prototype.getCurrent = b$$1.prototype.slickCurrentSlide = function() {
    var a = this;
    return a.currentSlide;
  };
  b$$1.prototype.getDotCount = function() {
    var a = this;
    var b = 0;
    var c = 0;
    var d = 0;
    if (a.options.infinite === true) {
      for (;b < a.slideCount;) {
        ++d;
        b = c + a.options.slidesToScroll;
        c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;
      }
    } else {
      if (a.options.centerMode === true) {
        d = a.slideCount;
      } else {
        if (a.options.asNavFor) {
          for (;b < a.slideCount;) {
            ++d;
            b = c + a.options.slidesToScroll;
            c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;
          }
        } else {
          d = 1 + Math.ceil((a.slideCount - a.options.slidesToShow) / a.options.slidesToScroll);
        }
      }
    }
    return d - 1;
  };
  b$$1.prototype.getLeft = function(a) {
    var c;
    var d;
    var f;
    var b = this;
    var e = 0;
    return b.slideOffset = 0, d = b.$slides.first().outerHeight(true), b.options.infinite === true ? (b.slideCount > b.options.slidesToShow && (b.slideOffset = b.slideWidth * b.options.slidesToShow * -1, e = d * b.options.slidesToShow * -1), b.slideCount % b.options.slidesToScroll !== 0 && (a + b.options.slidesToScroll > b.slideCount && (b.slideCount > b.options.slidesToShow && (a > b.slideCount ? (b.slideOffset = (b.options.slidesToShow - (a - b.slideCount)) * b.slideWidth * -1, e = (b.options.slidesToShow -
    (a - b.slideCount)) * d * -1) : (b.slideOffset = b.slideCount % b.options.slidesToScroll * b.slideWidth * -1, e = b.slideCount % b.options.slidesToScroll * d * -1))))) : a + b.options.slidesToShow > b.slideCount && (b.slideOffset = (a + b.options.slidesToShow - b.slideCount) * b.slideWidth, e = (a + b.options.slidesToShow - b.slideCount) * d), b.slideCount <= b.options.slidesToShow && (b.slideOffset = 0, e = 0), b.options.centerMode === true && b.options.infinite === true ? b.slideOffset += b.slideWidth *
    Math.floor(b.options.slidesToShow / 2) - b.slideWidth : b.options.centerMode === true && (b.slideOffset = 0, b.slideOffset += b.slideWidth * Math.floor(b.options.slidesToShow / 2)), c = b.options.vertical === false ? a * b.slideWidth * -1 + b.slideOffset : a * d * -1 + e, b.options.variableWidth === true && (f = b.slideCount <= b.options.slidesToShow || b.options.infinite === false ? b.$slideTrack.children(".slick-slide").eq(a) : b.$slideTrack.children(".slick-slide").eq(a + b.options.slidesToShow),
    c = b.options.rtl === true ? f[0] ? -1 * (b.$slideTrack.width() - f[0].offsetLeft - f.width()) : 0 : f[0] ? -1 * f[0].offsetLeft : 0, b.options.centerMode === true && (f = b.slideCount <= b.options.slidesToShow || b.options.infinite === false ? b.$slideTrack.children(".slick-slide").eq(a) : b.$slideTrack.children(".slick-slide").eq(a + b.options.slidesToShow + 1), c = b.options.rtl === true ? f[0] ? -1 * (b.$slideTrack.width() - f[0].offsetLeft - f.width()) : 0 : f[0] ? -1 * f[0].offsetLeft :
    0, c += (b.$list.width() - f.outerWidth()) / 2)), c;
  };
  b$$1.prototype.getOption = b$$1.prototype.slickGetOption = function(a) {
    var b = this;
    return b.options[a];
  };
  b$$1.prototype.getNavigableIndexes = function() {
    var e;
    var a = this;
    var b = 0;
    var c = 0;
    var d = [];
    if (a.options.infinite === false) {
      e = a.slideCount;
    } else {
      b = -1 * a.options.slidesToScroll;
      c = -1 * a.options.slidesToScroll;
      e = 2 * a.slideCount;
    }
    for (;e > b;) {
      d.push(b);
      b = c + a.options.slidesToScroll;
      c += a.options.slidesToScroll <= a.options.slidesToShow ? a.options.slidesToScroll : a.options.slidesToShow;
    }
    return d;
  };
  b$$1.prototype.getSlick = function() {
    return this;
  };
  b$$1.prototype.getSlideCount = function() {
    var c$$0;
    var d;
    var e;
    var b = this;
    return e = b.options.centerMode === true ? b.slideWidth * Math.floor(b.options.slidesToShow / 2) : 0, b.options.swipeToSlide === true ? (b.$slideTrack.find(".slick-slide").each(function(c, f) {
      return f.offsetLeft - e + a$$0(f).outerWidth() / 2 > -1 * b.swipeLeft ? (d = f, false) : void 0;
    }), c$$0 = Math.abs(a$$0(d).attr("data-slick-index") - b.currentSlide) || 1) : b.options.slidesToScroll;
  };
  b$$1.prototype.goTo = b$$1.prototype.slickGoTo = function(a, b) {
    var c = this;
    c.changeSlide({
      data : {
        message : "index",
        index : parseInt(a)
      }
    }, b);
  };
  b$$1.prototype.init = function(b) {
    var c = this;
    if (!a$$0(c.$slider).hasClass("slick-initialized")) {
      a$$0(c.$slider).addClass("slick-initialized");
      c.buildRows();
      c.buildOut();
      c.setProps();
      c.startLoad();
      c.loadSlider();
      c.initializeEvents();
      c.updateArrows();
      c.updateDots();
      c.checkResponsive(true);
      c.focusHandler();
    }
    if (b) {
      c.$slider.trigger("init", [c]);
    }
    if (c.options.accessibility === true) {
      c.initADA();
    }
    if (c.options.autoplay) {
      c.paused = false;
      c.autoPlay();
    }
  };
  b$$1.prototype.initADA = function() {
    var b = this;
    b.$slides.add(b.$slideTrack.find(".slick-cloned")).attr({
      "aria-hidden" : "true",
      tabindex : "-1"
    }).find("a, input, button, select").attr({
      tabindex : "-1"
    });
    b.$slideTrack.attr("role", "listbox");
    b.$slides.not(b.$slideTrack.find(".slick-cloned")).each(function(c) {
      a$$0(this).attr({
        role : "option",
        "aria-describedby" : "slick-slide" + b.instanceUid + c
      });
    });
    if (null !== b.$dots) {
      b.$dots.attr("role", "tablist").find("li").each(function(c) {
        a$$0(this).attr({
          role : "presentation",
          "aria-selected" : "false",
          "aria-controls" : "navigation" + b.instanceUid + c,
          id : "slick-slide" + b.instanceUid + c
        });
      }).first().attr("aria-selected", "true").end().find("button").attr("role", "button").end().closest("div").attr("role", "toolbar");
    }
    b.activateADA();
  };
  b$$1.prototype.initArrowEvents = function() {
    var a = this;
    if (a.options.arrows === true) {
      if (a.slideCount > a.options.slidesToShow) {
        a.$prevArrow.off("click.slick").on("click.slick", {
          message : "previous"
        }, a.changeSlide);
        a.$nextArrow.off("click.slick").on("click.slick", {
          message : "next"
        }, a.changeSlide);
      }
    }
  };
  b$$1.prototype.initDotEvents = function() {
    var b = this;
    if (b.options.dots === true) {
      if (b.slideCount > b.options.slidesToShow) {
        a$$0("li", b.$dots).on("click.slick", {
          message : "index"
        }, b.changeSlide);
      }
    }
    if (b.options.dots === true) {
      if (b.options.pauseOnDotsHover === true) {
        a$$0("li", b.$dots).on("mouseenter.slick", a$$0.proxy(b.interrupt, b, true)).on("mouseleave.slick", a$$0.proxy(b.interrupt, b, false));
      }
    }
  };
  b$$1.prototype.initSlideEvents = function() {
    var b = this;
    if (b.options.pauseOnHover) {
      b.$list.on("mouseenter.slick", a$$0.proxy(b.interrupt, b, true));
      b.$list.on("mouseleave.slick", a$$0.proxy(b.interrupt, b, false));
    }
  };
  b$$1.prototype.initializeEvents = function() {
    var b = this;
    b.initArrowEvents();
    b.initDotEvents();
    b.initSlideEvents();
    b.$list.on("touchstart.slick mousedown.slick", {
      action : "start"
    }, b.swipeHandler);
    b.$list.on("touchmove.slick mousemove.slick", {
      action : "move"
    }, b.swipeHandler);
    b.$list.on("touchend.slick mouseup.slick", {
      action : "end"
    }, b.swipeHandler);
    b.$list.on("touchcancel.slick mouseleave.slick", {
      action : "end"
    }, b.swipeHandler);
    b.$list.on("click.slick", b.clickHandler);
    a$$0(document).on(b.visibilityChange, a$$0.proxy(b.visibility, b));
    if (b.options.accessibility === true) {
      b.$list.on("keydown.slick", b.keyHandler);
    }
    if (b.options.focusOnSelect === true) {
      a$$0(b.$slideTrack).children().on("click.slick", b.selectHandler);
    }
    a$$0(window).on("orientationchange.slick.slick-" + b.instanceUid, a$$0.proxy(b.orientationChange, b));
    a$$0(window).on("resize.slick.slick-" + b.instanceUid, a$$0.proxy(b.resize, b));
    a$$0("[draggable!=true]", b.$slideTrack).on("dragstart", b.preventDefault);
    a$$0(window).on("load.slick.slick-" + b.instanceUid, b.setPosition);
    a$$0(document).on("ready.slick.slick-" + b.instanceUid, b.setPosition);
  };
  b$$1.prototype.initUI = function() {
    var a = this;
    if (a.options.arrows === true) {
      if (a.slideCount > a.options.slidesToShow) {
        a.$prevArrow.show();
        a.$nextArrow.show();
      }
    }
    if (a.options.dots === true) {
      if (a.slideCount > a.options.slidesToShow) {
        a.$dots.show();
      }
    }
  };
  b$$1.prototype.keyHandler = function(a) {
    var b = this;
    if (!a.target.tagName.match("TEXTAREA|INPUT|SELECT")) {
      if (37 === a.keyCode && b.options.accessibility === true) {
        b.changeSlide({
          data : {
            message : b.options.rtl === true ? "next" : "previous"
          }
        });
      } else {
        if (39 === a.keyCode) {
          if (b.options.accessibility === true) {
            b.changeSlide({
              data : {
                message : b.options.rtl === true ? "previous" : "next"
              }
            });
          }
        }
      }
    }
  };
  b$$1.prototype.lazyLoad = function() {
    function g(c$$0) {
      a$$0("img[data-lazy]", c$$0).each(function() {
        var c = a$$0(this);
        var d = a$$0(this).attr("data-lazy");
        var e = document.createElement("img");
        e.onload = function() {
          c.animate({
            opacity : 0
          }, 100, function() {
            c.attr("src", d).animate({
              opacity : 1
            }, 200, function() {
              c.removeAttr("data-lazy").removeClass("slick-loading");
            });
            b.$slider.trigger("lazyLoaded", [b, c, d]);
          });
        };
        e.onerror = function() {
          c.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error");
          b.$slider.trigger("lazyLoadError", [b, c, d]);
        };
        e.src = d;
      });
    }
    var c$$1;
    var d$$0;
    var e$$0;
    var f;
    var b = this;
    if (b.options.centerMode === true) {
      if (b.options.infinite === true) {
        e$$0 = b.currentSlide + (b.options.slidesToShow / 2 + 1);
        f = e$$0 + b.options.slidesToShow + 2;
      } else {
        e$$0 = Math.max(0, b.currentSlide - (b.options.slidesToShow / 2 + 1));
        f = 2 + (b.options.slidesToShow / 2 + 1) + b.currentSlide;
      }
    } else {
      e$$0 = b.options.infinite ? b.options.slidesToShow + b.currentSlide : b.currentSlide;
      f = Math.ceil(e$$0 + b.options.slidesToShow);
      if (b.options.fade === true) {
        if (e$$0 > 0) {
          e$$0--;
        }
        if (f <= b.slideCount) {
          f++;
        }
      }
    }
    c$$1 = b.$slider.find(".slick-slide").slice(e$$0, f);
    g(c$$1);
    if (b.slideCount <= b.options.slidesToShow) {
      d$$0 = b.$slider.find(".slick-slide");
      g(d$$0);
    } else {
      if (b.currentSlide >= b.slideCount - b.options.slidesToShow) {
        d$$0 = b.$slider.find(".slick-cloned").slice(0, b.options.slidesToShow);
        g(d$$0);
      } else {
        if (0 === b.currentSlide) {
          d$$0 = b.$slider.find(".slick-cloned").slice(-1 * b.options.slidesToShow);
          g(d$$0);
        }
      }
    }
  };
  b$$1.prototype.loadSlider = function() {
    var a = this;
    a.setPosition();
    a.$slideTrack.css({
      opacity : 1
    });
    a.$slider.removeClass("slick-loading");
    a.initUI();
    if ("progressive" === a.options.lazyLoad) {
      a.progressiveLazyLoad();
    }
  };
  b$$1.prototype.next = b$$1.prototype.slickNext = function() {
    var a = this;
    a.changeSlide({
      data : {
        message : "next"
      }
    });
  };
  b$$1.prototype.orientationChange = function() {
    var a = this;
    a.checkResponsive();
    a.setPosition();
  };
  b$$1.prototype.pause = b$$1.prototype.slickPause = function() {
    var a = this;
    a.autoPlayClear();
    a.paused = true;
  };
  b$$1.prototype.play = b$$1.prototype.slickPlay = function() {
    var a = this;
    a.autoPlay();
    a.options.autoplay = true;
    a.paused = false;
    a.focussed = false;
    a.interrupted = false;
  };
  b$$1.prototype.postSlide = function(a) {
    var b = this;
    if (!b.unslicked) {
      b.$slider.trigger("afterChange", [b, a]);
      b.animating = false;
      b.setPosition();
      b.swipeLeft = null;
      if (b.options.autoplay) {
        b.autoPlay();
      }
      if (b.options.accessibility === true) {
        b.initADA();
      }
    }
  };
  b$$1.prototype.prev = b$$1.prototype.slickPrev = function() {
    var a = this;
    a.changeSlide({
      data : {
        message : "previous"
      }
    });
  };
  b$$1.prototype.preventDefault = function(a) {
    a.preventDefault();
  };
  b$$1.prototype.progressiveLazyLoad = function(b) {
    b = b || 1;
    var e;
    var f;
    var g;
    var c = this;
    var d = a$$0("img[data-lazy]", c.$slider);
    if (d.length) {
      e = d.first();
      f = e.attr("data-lazy");
      g = document.createElement("img");
      g.onload = function() {
        e.attr("src", f).removeAttr("data-lazy").removeClass("slick-loading");
        if (c.options.adaptiveHeight === true) {
          c.setPosition();
        }
        c.$slider.trigger("lazyLoaded", [c, e, f]);
        c.progressiveLazyLoad();
      };
      g.onerror = function() {
        if (3 > b) {
          setTimeout(function() {
            c.progressiveLazyLoad(b + 1);
          }, 500);
        } else {
          e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error");
          c.$slider.trigger("lazyLoadError", [c, e, f]);
          c.progressiveLazyLoad();
        }
      };
      g.src = f;
    } else {
      c.$slider.trigger("allImagesLoaded", [c]);
    }
  };
  b$$1.prototype.refresh = function(b) {
    var d;
    var e;
    var c = this;
    e = c.slideCount - c.options.slidesToShow;
    if (!c.options.infinite) {
      if (c.currentSlide > e) {
        c.currentSlide = e;
      }
    }
    if (c.slideCount <= c.options.slidesToShow) {
      c.currentSlide = 0;
    }
    d = c.currentSlide;
    c.destroy(true);
    a$$0.extend(c, c.initials, {
      currentSlide : d
    });
    c.init();
    if (!b) {
      c.changeSlide({
        data : {
          message : "index",
          index : d
        }
      }, false);
    }
  };
  b$$1.prototype.registerBreakpoints = function() {
    var c$$0;
    var d;
    var e;
    var b = this;
    var f = b.options.responsive || null;
    if ("array" === a$$0.type(f) && f.length) {
      b.respondTo = b.options.respondTo || "window";
      for (c$$0 in f) {
        if (e = b.breakpoints.length - 1, d = f[c$$0].breakpoint, f.hasOwnProperty(c$$0)) {
          for (;e >= 0;) {
            if (b.breakpoints[e]) {
              if (b.breakpoints[e] === d) {
                b.breakpoints.splice(e, 1);
              }
            }
            e--;
          }
          b.breakpoints.push(d);
          b.breakpointSettings[d] = f[c$$0].settings;
        }
      }
      b.breakpoints.sort(function(a, c) {
        return b.options.mobileFirst ? a - c : c - a;
      });
    }
  };
  b$$1.prototype.reinit = function() {
    var b = this;
    b.$slides = b.$slideTrack.children(b.options.slide).addClass("slick-slide");
    b.slideCount = b.$slides.length;
    if (b.currentSlide >= b.slideCount) {
      if (0 !== b.currentSlide) {
        b.currentSlide = b.currentSlide - b.options.slidesToScroll;
      }
    }
    if (b.slideCount <= b.options.slidesToShow) {
      b.currentSlide = 0;
    }
    b.registerBreakpoints();
    b.setProps();
    b.setupInfinite();
    b.buildArrows();
    b.updateArrows();
    b.initArrowEvents();
    b.buildDots();
    b.updateDots();
    b.initDotEvents();
    b.cleanUpSlideEvents();
    b.initSlideEvents();
    b.checkResponsive(false, true);
    if (b.options.focusOnSelect === true) {
      a$$0(b.$slideTrack).children().on("click.slick", b.selectHandler);
    }
    b.setSlideClasses("number" == typeof b.currentSlide ? b.currentSlide : 0);
    b.setPosition();
    b.focusHandler();
    b.paused = !b.options.autoplay;
    b.autoPlay();
    b.$slider.trigger("reInit", [b]);
  };
  b$$1.prototype.resize = function() {
    var b = this;
    if (a$$0(window).width() !== b.windowWidth) {
      clearTimeout(b.windowDelay);
      b.windowDelay = window.setTimeout(function() {
        b.windowWidth = a$$0(window).width();
        b.checkResponsive();
        if (!b.unslicked) {
          b.setPosition();
        }
      }, 50);
    }
  };
  b$$1.prototype.removeSlide = b$$1.prototype.slickRemove = function(a, b, c) {
    var d = this;
    return "boolean" == typeof a ? (b = a, a = b === true ? 0 : d.slideCount - 1) : a = b === true ? --a : a, d.slideCount < 1 || (0 > a || a > d.slideCount - 1) ? false : (d.unload(), c === true ? d.$slideTrack.children().remove() : d.$slideTrack.children(this.options.slide).eq(a).remove(), d.$slides = d.$slideTrack.children(this.options.slide), d.$slideTrack.children(this.options.slide).detach(), d.$slideTrack.append(d.$slides), d.$slidesCache = d.$slides, void d.reinit());
  };
  b$$1.prototype.setCSS = function(a) {
    var d;
    var e;
    var b = this;
    var c = {};
    if (b.options.rtl === true) {
      a = -a;
    }
    d = "left" == b.positionProp ? Math.ceil(a) + "px" : "0px";
    e = "top" == b.positionProp ? Math.ceil(a) + "px" : "0px";
    c[b.positionProp] = a;
    if (b.transformsEnabled === false) {
      b.$slideTrack.css(c);
    } else {
      c = {};
      if (b.cssTransitions === false) {
        c[b.animType] = "translate(" + d + ", " + e + ")";
        b.$slideTrack.css(c);
      } else {
        c[b.animType] = "translate3d(" + d + ", " + e + ", 0px)";
        b.$slideTrack.css(c);
      }
    }
  };
  b$$1.prototype.setDimensions = function() {
    var a = this;
    if (a.options.vertical === false) {
      if (a.options.centerMode === true) {
        a.$list.css({
          padding : "0px " + a.options.centerPadding
        });
      }
    } else {
      a.$list.height(a.$slides.first().outerHeight(true) * a.options.slidesToShow);
      if (a.options.centerMode === true) {
        a.$list.css({
          padding : a.options.centerPadding + " 0px"
        });
      }
    }
    a.listWidth = a.$list.width();
    a.listHeight = a.$list.height();
    if (a.options.vertical === false && a.options.variableWidth === false) {
      a.slideWidth = Math.ceil(a.listWidth / a.options.slidesToShow);
      a.$slideTrack.width(Math.ceil(a.slideWidth * a.$slideTrack.children(".slick-slide").length));
    } else {
      if (a.options.variableWidth === true) {
        a.$slideTrack.width(5E3 * a.slideCount);
      } else {
        a.slideWidth = Math.ceil(a.listWidth);
        a.$slideTrack.height(Math.ceil(a.$slides.first().outerHeight(true) * a.$slideTrack.children(".slick-slide").length));
      }
    }
    var b = a.$slides.first().outerWidth(true) - a.$slides.first().width();
    if (a.options.variableWidth === false) {
      a.$slideTrack.children(".slick-slide").width(a.slideWidth - b);
    }
  };
  b$$1.prototype.setFade = function() {
    var c;
    var b = this;
    b.$slides.each(function(d, e) {
      c = b.slideWidth * d * -1;
      if (b.options.rtl === true) {
        a$$0(e).css({
          position : "relative",
          right : c,
          top : 0,
          zIndex : b.options.zIndex - 2,
          opacity : 0
        });
      } else {
        a$$0(e).css({
          position : "relative",
          left : c,
          top : 0,
          zIndex : b.options.zIndex - 2,
          opacity : 0
        });
      }
    });
    b.$slides.eq(b.currentSlide).css({
      zIndex : b.options.zIndex - 1,
      opacity : 1
    });
  };
  b$$1.prototype.setHeight = function() {
    var a = this;
    if (1 === a.options.slidesToShow && (a.options.adaptiveHeight === true && a.options.vertical === false)) {
      var b = a.$slides.eq(a.currentSlide).outerHeight(true);
      a.$list.css("height", b);
    }
  };
  b$$1.prototype.setOption = b$$1.prototype.slickSetOption = function() {
    var c$$0;
    var d;
    var e;
    var f;
    var h;
    var b = this;
    var g = false;
    if ("object" === a$$0.type(arguments[0]) ? (e = arguments[0], g = arguments[1], h = "multiple") : "string" === a$$0.type(arguments[0]) && (e = arguments[0], f = arguments[1], g = arguments[2], "responsive" === arguments[0] && "array" === a$$0.type(arguments[1]) ? h = "responsive" : "undefined" != typeof arguments[1] && (h = "single")), "single" === h) {
      b.options[e] = f;
    } else {
      if ("multiple" === h) {
        a$$0.each(e, function(a, c) {
          b.options[a] = c;
        });
      } else {
        if ("responsive" === h) {
          for (d in f) {
            if ("array" !== a$$0.type(b.options.responsive)) {
              b.options.responsive = [f[d]];
            } else {
              c$$0 = b.options.responsive.length - 1;
              for (;c$$0 >= 0;) {
                if (b.options.responsive[c$$0].breakpoint === f[d].breakpoint) {
                  b.options.responsive.splice(c$$0, 1);
                }
                c$$0--;
              }
              b.options.responsive.push(f[d]);
            }
          }
        }
      }
    }
    if (g) {
      b.unload();
      b.reinit();
    }
  };
  b$$1.prototype.setPosition = function() {
    var a = this;
    a.setDimensions();
    a.setHeight();
    if (a.options.fade === false) {
      a.setCSS(a.getLeft(a.currentSlide));
    } else {
      a.setFade();
    }
    a.$slider.trigger("setPosition", [a]);
  };
  b$$1.prototype.setProps = function() {
    var a = this;
    var b = document.body.style;
    a.positionProp = a.options.vertical === true ? "top" : "left";
    if ("top" === a.positionProp) {
      a.$slider.addClass("slick-vertical");
    } else {
      a.$slider.removeClass("slick-vertical");
    }
    if (void 0 !== b.WebkitTransition || (void 0 !== b.MozTransition || void 0 !== b.msTransition)) {
      if (a.options.useCSS === true) {
        a.cssTransitions = true;
      }
    }
    if (a.options.fade) {
      if ("number" == typeof a.options.zIndex) {
        if (a.options.zIndex < 3) {
          a.options.zIndex = 3;
        }
      } else {
        a.options.zIndex = a.defaults.zIndex;
      }
    }
    if (void 0 !== b.OTransform) {
      a.animType = "OTransform";
      a.transformType = "-o-transform";
      a.transitionType = "OTransition";
      if (void 0 === b.perspectiveProperty) {
        if (void 0 === b.webkitPerspective) {
          a.animType = false;
        }
      }
    }
    if (void 0 !== b.MozTransform) {
      a.animType = "MozTransform";
      a.transformType = "-moz-transform";
      a.transitionType = "MozTransition";
      if (void 0 === b.perspectiveProperty) {
        if (void 0 === b.MozPerspective) {
          a.animType = false;
        }
      }
    }
    if (void 0 !== b.webkitTransform) {
      a.animType = "webkitTransform";
      a.transformType = "-webkit-transform";
      a.transitionType = "webkitTransition";
      if (void 0 === b.perspectiveProperty) {
        if (void 0 === b.webkitPerspective) {
          a.animType = false;
        }
      }
    }
    if (void 0 !== b.msTransform) {
      a.animType = "msTransform";
      a.transformType = "-ms-transform";
      a.transitionType = "msTransition";
      if (void 0 === b.msTransform) {
        a.animType = false;
      }
    }
    if (void 0 !== b.transform) {
      if (a.animType !== false) {
        a.animType = "transform";
        a.transformType = "transform";
        a.transitionType = "transition";
      }
    }
    a.transformsEnabled = a.options.useTransform && (null !== a.animType && a.animType !== false);
  };
  b$$1.prototype.setSlideClasses = function(a) {
    var c;
    var d;
    var e;
    var f;
    var b = this;
    d = b.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true");
    b.$slides.eq(a).addClass("slick-current");
    if (b.options.centerMode === true) {
      c = Math.floor(b.options.slidesToShow / 2);
      if (b.options.infinite === true) {
        if (a >= c && a <= b.slideCount - 1 - c) {
          b.$slides.slice(a - c, a + c + 1).addClass("slick-active").attr("aria-hidden", "false");
          
        } else {
          e = b.options.slidesToShow + a;
          d.slice(e - c + 1, e + c + 2).addClass("slick-active").attr("aria-hidden", "false");
        }
        if (0 === a) {
          d.eq(d.length - 1 - b.options.slidesToShow).addClass("slick-center");
        } else {
          if (a === b.slideCount - 1) {
            d.eq(b.options.slidesToShow).addClass("slick-center");
          }
        }
      }
      b.$slides.eq(a).addClass("slick-center");
    } else {
      if (a >= 0 && a <= b.slideCount - b.options.slidesToShow) {
        b.$slides.slice(a, a + b.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false");
      } else {
        if (d.length <= b.options.slidesToShow) {
          d.addClass("slick-active").attr("aria-hidden", "false");
        } else {
          f = b.slideCount % b.options.slidesToShow;
          e = b.options.infinite === true ? b.options.slidesToShow + a : a;
          if (b.options.slidesToShow == b.options.slidesToScroll && b.slideCount - a < b.options.slidesToShow) {
            d.slice(e - (b.options.slidesToShow - f), e + f).addClass("slick-active").attr("aria-hidden", "false");
          } else {
            d.slice(e, e + b.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false");
          }
        }
      }
    }
    if ("ondemand" === b.options.lazyLoad) {
      b.lazyLoad();
    }
  };
  b$$1.prototype.setupInfinite = function() {
    var c;
    var d;
    var e;
    var b = this;
    if (b.options.fade === true && (b.options.centerMode = false), b.options.infinite === true && (b.options.fade === false && (d = null, b.slideCount > b.options.slidesToShow))) {
      e = b.options.centerMode === true ? b.options.slidesToShow + 1 : b.options.slidesToShow;
      c = b.slideCount;
      for (;c > b.slideCount - e;c -= 1) {
        d = c - 1;
        a$$0(b.$slides[d]).clone(true).attr("id", "").attr("data-slick-index", d - b.slideCount).prependTo(b.$slideTrack).addClass("slick-cloned");
      }
      c = 0;
      for (;e > c;c += 1) {
        d = c;
        a$$0(b.$slides[d]).clone(true).attr("id", "").attr("data-slick-index", d + b.slideCount).appendTo(b.$slideTrack).addClass("slick-cloned");
      }
      b.$slideTrack.find(".slick-cloned").find("[id]").each(function() {
        a$$0(this).attr("id", "");
      });
    }
  };
  b$$1.prototype.interrupt = function(a) {
    var b = this;
    if (!a) {
      b.autoPlay();
    }
    b.interrupted = a;
  };
  b$$1.prototype.selectHandler = function(b) {
    var c = this;
    var d = a$$0(b.target).is(".slick-slide") ? a$$0(b.target) : a$$0(b.target).parents(".slick-slide");
    var e = parseInt(d.attr("data-slick-index"));
    return e || (e = 0), c.slideCount <= c.options.slidesToShow ? (c.setSlideClasses(e), void c.asNavFor(e)) : void c.slideHandler(e);
  };
  b$$1.prototype.slideHandler = function(a, b, c) {
    var d;
    var e;
    var f;
    var g;
    var j;
    var h = null;
    var i = this;
    return b = b || false, i.animating === true && i.options.waitForAnimate === true || (i.options.fade === true && i.currentSlide === a || i.slideCount <= i.options.slidesToShow) ? void 0 : (b === false && i.asNavFor(a), d = a, h = i.getLeft(d), g = i.getLeft(i.currentSlide), i.currentLeft = null === i.swipeLeft ? g : i.swipeLeft, i.options.infinite === false && (i.options.centerMode === false && (0 > a || a > i.getDotCount() * i.options.slidesToScroll)) ? void(i.options.fade === false && (d = i.currentSlide,
    c !== true ? i.animateSlide(g, function() {
      i.postSlide(d);
    }) : i.postSlide(d))) : i.options.infinite === false && (i.options.centerMode === true && (0 > a || a > i.slideCount - i.options.slidesToScroll)) ? void(i.options.fade === false && (d = i.currentSlide, c !== true ? i.animateSlide(g, function() {
      i.postSlide(d);
    }) : i.postSlide(d))) : (i.options.autoplay && clearInterval(i.autoPlayTimer), e = 0 > d ? i.slideCount % i.options.slidesToScroll !== 0 ? i.slideCount - i.slideCount % i.options.slidesToScroll : i.slideCount + d : d >= i.slideCount ? i.slideCount % i.options.slidesToScroll !== 0 ? 0 : d - i.slideCount : d, i.animating = true, i.$slider.trigger("beforeChange", [i, i.currentSlide, e]), f = i.currentSlide, i.currentSlide = e, i.setSlideClasses(i.currentSlide), i.options.asNavFor && (j = i.getNavTarget(),
    j = j.slick("getSlick"), j.slideCount <= j.options.slidesToShow && j.setSlideClasses(i.currentSlide)), i.updateDots(), i.updateArrows(), i.options.fade === true ? (c !== true ? (i.fadeSlideOut(f), i.fadeSlide(e, function() {
      i.postSlide(e);
    })) : i.postSlide(e), void i.animateHeight()) : void(c !== true ? i.animateSlide(h, function() {
      i.postSlide(e);
    }) : i.postSlide(e))));
  };
  b$$1.prototype.startLoad = function() {
    var a = this;
    if (a.options.arrows === true) {
      if (a.slideCount > a.options.slidesToShow) {
        a.$prevArrow.hide();
        a.$nextArrow.hide();
      }
    }
    if (a.options.dots === true) {
      if (a.slideCount > a.options.slidesToShow) {
        a.$dots.hide();
      }
    }
    a.$slider.addClass("slick-loading");
  };
  b$$1.prototype.swipeDirection = function() {
    var a;
    var b;
    var c;
    var d;
    var e = this;
    return a = e.touchObject.startX - e.touchObject.curX, b = e.touchObject.startY - e.touchObject.curY, c = Math.atan2(b, a), d = Math.round(180 * c / Math.PI), 0 > d && (d = 360 - Math.abs(d)), 45 >= d && d >= 0 ? e.options.rtl === false ? "left" : "right" : 360 >= d && d >= 315 ? e.options.rtl === false ? "left" : "right" : d >= 135 && 225 >= d ? e.options.rtl === false ? "right" : "left" : e.options.verticalSwiping === true ? d >= 35 && 135 >= d ? "down" : "up" : "vertical";
  };
  b$$1.prototype.swipeEnd = function(a) {
    var c;
    var d;
    var b = this;
    if (b.dragging = false, b.interrupted = false, b.shouldClick = b.touchObject.swipeLength > 10 ? false : true, void 0 === b.touchObject.curX) {
      return false;
    }
    if (b.touchObject.edgeHit === true && b.$slider.trigger("edge", [b, b.swipeDirection()]), b.touchObject.swipeLength >= b.touchObject.minSwipe) {
      switch(d = b.swipeDirection()) {
        case "left":
        ;
        case "down":
          c = b.options.swipeToSlide ? b.checkNavigable(b.currentSlide + b.getSlideCount()) : b.currentSlide + b.getSlideCount();
          b.currentDirection = 0;
          break;
        case "right":
        ;
        case "up":
          c = b.options.swipeToSlide ? b.checkNavigable(b.currentSlide - b.getSlideCount()) : b.currentSlide - b.getSlideCount();
          b.currentDirection = 1;
      }
      if ("vertical" != d) {
        b.slideHandler(c);
        b.touchObject = {};
        b.$slider.trigger("swipe", [b, d]);
      }
    } else {
      if (b.touchObject.startX !== b.touchObject.curX) {
        b.slideHandler(b.currentSlide);
        b.touchObject = {};
      }
    }
  };
  b$$1.prototype.swipeHandler = function(a) {
    var b = this;
    if (!(b.options.swipe === false || ("ontouchend" in document && b.options.swipe === false || b.options.draggable === false && -1 !== a.type.indexOf("mouse")))) {
      switch(b.touchObject.fingerCount = a.originalEvent && void 0 !== a.originalEvent.touches ? a.originalEvent.touches.length : 1, b.touchObject.minSwipe = b.listWidth / b.options.touchThreshold, b.options.verticalSwiping === true && (b.touchObject.minSwipe = b.listHeight / b.options.touchThreshold), a.data.action) {
        case "start":
          b.swipeStart(a);
          break;
        case "move":
          b.swipeMove(a);
          break;
        case "end":
          b.swipeEnd(a);
      }
    }
  };
  b$$1.prototype.swipeMove = function(a) {
    var d;
    var e;
    var f;
    var g;
    var h;
    var b = this;
    return h = void 0 !== a.originalEvent ? a.originalEvent.touches : null, !b.dragging || h && 1 !== h.length ? false : (d = b.getLeft(b.currentSlide), b.touchObject.curX = void 0 !== h ? h[0].pageX : a.clientX, b.touchObject.curY = void 0 !== h ? h[0].pageY : a.clientY, b.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(b.touchObject.curX - b.touchObject.startX, 2))), b.options.verticalSwiping === true && (b.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(b.touchObject.curY - b.touchObject.startY,
    2)))), e = b.swipeDirection(), "vertical" !== e ? (void 0 !== a.originalEvent && (b.touchObject.swipeLength > 4 && a.preventDefault()), g = (b.options.rtl === false ? 1 : -1) * (b.touchObject.curX > b.touchObject.startX ? 1 : -1), b.options.verticalSwiping === true && (g = b.touchObject.curY > b.touchObject.startY ? 1 : -1), f = b.touchObject.swipeLength, b.touchObject.edgeHit = false, b.options.infinite === false && ((0 === b.currentSlide && "right" === e || b.currentSlide >= b.getDotCount() &&
    "left" === e) && (f = b.touchObject.swipeLength * b.options.edgeFriction, b.touchObject.edgeHit = true)), b.options.vertical === false ? b.swipeLeft = d + f * g : b.swipeLeft = d + f * (b.$list.height() / b.listWidth) * g, b.options.verticalSwiping === true && (b.swipeLeft = d + f * g), b.options.fade === true || b.options.touchMove === false ? false : b.animating === true ? (b.swipeLeft = null, false) : void b.setCSS(b.swipeLeft)) : void 0);
  };
  b$$1.prototype.swipeStart = function(a) {
    var c;
    var b = this;
    return b.interrupted = true, 1 !== b.touchObject.fingerCount || b.slideCount <= b.options.slidesToShow ? (b.touchObject = {}, false) : (void 0 !== a.originalEvent && (void 0 !== a.originalEvent.touches && (c = a.originalEvent.touches[0])), b.touchObject.startX = b.touchObject.curX = void 0 !== c ? c.pageX : a.clientX, b.touchObject.startY = b.touchObject.curY = void 0 !== c ? c.pageY : a.clientY, void(b.dragging = true));
  };
  b$$1.prototype.unfilterSlides = b$$1.prototype.slickUnfilter = function() {
    var a = this;
    if (null !== a.$slidesCache) {
      a.unload();
      a.$slideTrack.children(this.options.slide).detach();
      a.$slidesCache.appendTo(a.$slideTrack);
      a.reinit();
    }
  };
  b$$1.prototype.unload = function() {
    var b = this;
    a$$0(".slick-cloned", b.$slider).remove();
    if (b.$dots) {
      b.$dots.remove();
    }
    if (b.$prevArrow) {
      if (b.htmlExpr.test(b.options.prevArrow)) {
        b.$prevArrow.remove();
      }
    }
    if (b.$nextArrow) {
      if (b.htmlExpr.test(b.options.nextArrow)) {
        b.$nextArrow.remove();
      }
    }
    b.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "");
  };
  b$$1.prototype.unslick = function(a) {
    var b = this;
    b.$slider.trigger("unslick", [b, a]);
    b.destroy();
  };
  b$$1.prototype.updateArrows = function() {
    var b;
    var a = this;
    b = Math.floor(a.options.slidesToShow / 2);
    if (a.options.arrows === true) {
      if (a.slideCount > a.options.slidesToShow) {
        if (!a.options.infinite) {
          a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
          a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
          if (0 === a.currentSlide) {
            a.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true");
            a.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
          } else {
            if (a.currentSlide >= a.slideCount - a.options.slidesToShow && a.options.centerMode === false) {
              a.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
              a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
            } else {
              if (a.currentSlide >= a.slideCount - 1) {
                if (a.options.centerMode === true) {
                  a.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true");
                  a.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false");
                }
              }
            }
          }
        }
      }
    }
  };
  b$$1.prototype.updateDots = function() {
    var a = this;
    if (null !== a.$dots) {
      a.$dots.find("li").removeClass("slick-active").attr("aria-hidden", "true");
      a.$dots.find("li").eq(Math.floor(a.currentSlide / a.options.slidesToScroll)).addClass("slick-active").attr("aria-hidden", "false");
    }
  };
  b$$1.prototype.visibility = function() {
    var a = this;
    if (a.options.autoplay) {
      if (document[a.hidden]) {
        a.interrupted = true;
      } else {
        a.interrupted = false;
      }
    }
  };
  a$$0.fn.slick = function() {
    var f;
    var g;
    var a = this;
    var c = arguments[0];
    var d = Array.prototype.slice.call(arguments, 1);
    var e = a.length;
    f = 0;
    for (;e > f;f++) {
      if ("object" == typeof c || "undefined" == typeof c ? a[f].slick = new b$$1(a[f], c) : g = a[f].slick[c].apply(a[f].slick, d), "undefined" != typeof g) {
        return g;
      }
    }
    return a;
  };
});
!function(t, e) {
  if ("function" == typeof define && define.amd) {
    define("jquery-bridget/jquery-bridget", ["jquery"], function(i) {
      e(t, i);
    });
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = e(t, require("jquery"));
    } else {
      t.jQueryBridget = e(t, t.jQuery);
    }
  }
}(window, function(t$$2, e$$0) {
  function i$$0(i, s$$0, a) {
    function u(t$$0, e, n) {
      var o;
      var s = "$()." + i + '("' + e + '")';
      return t$$0.each(function(t, u) {
        var h = a.data(u, i);
        if (!h) {
          return void r(i + " not initialized. Cannot call methods, i.e. " + s);
        }
        var d = h[e];
        if (!d || "_" == e.charAt(0)) {
          return void r(s + " is not a valid method");
        }
        var l = d.apply(h, n);
        o = void 0 === o ? l : o;
      }), void 0 !== o ? o : t$$0;
    }
    function h$$0(t$$0, e) {
      t$$0.each(function(t, n) {
        var o = a.data(n, i);
        if (o) {
          o.option(e);
          o._init();
        } else {
          o = new s$$0(n, e);
          a.data(n, i, o);
        }
      });
    }
    a = a || (e$$0 || t$$2.jQuery);
    if (a) {
      if (!s$$0.prototype.option) {
        s$$0.prototype.option = function(t) {
          if (a.isPlainObject(t)) {
            this.options = a.extend(true, this.options, t);
          }
        };
      }
      a.fn[i] = function(t) {
        if ("string" == typeof t) {
          var e = o$$0.call(arguments, 1);
          return u(this, t, e);
        }
        return h$$0(this, t), this;
      };
      n$$0(a);
    }
  }
  function n$$0(t) {
    if (!!t) {
      if (!(t && t.bridget)) {
        t.bridget = i$$0;
      }
    }
  }
  var o$$0 = Array.prototype.slice;
  var s$$2 = t$$2.console;
  var r = "undefined" == typeof s$$2 ? function() {
  } : function(t) {
    s$$2.error(t);
  };
  return n$$0(e$$0 || t$$2.jQuery), i$$0;
}), function(t, e) {
  if ("function" == typeof define && define.amd) {
    define("ev-emitter/ev-emitter", e);
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = e();
    } else {
      t.EvEmitter = e();
    }
  }
}("undefined" != typeof window ? window : this, function() {
  function t$$0() {
  }
  var e$$0 = t$$0.prototype;
  return e$$0.on = function(t, e) {
    if (t && e) {
      var i = this._events = this._events || {};
      var n = i[t] = i[t] || [];
      return-1 == n.indexOf(e) && n.push(e), this;
    }
  }, e$$0.once = function(t, e) {
    if (t && e) {
      this.on(t, e);
      var i = this._onceEvents = this._onceEvents || {};
      var n = i[t] = i[t] || {};
      return n[e] = true, this;
    }
  }, e$$0.off = function(t, e) {
    var i = this._events && this._events[t];
    if (i && i.length) {
      var n = i.indexOf(e);
      return-1 != n && i.splice(n, 1), this;
    }
  }, e$$0.emitEvent = function(t, e) {
    var i = this._events && this._events[t];
    if (i && i.length) {
      var n = 0;
      var o = i[n];
      e = e || [];
      var s = this._onceEvents && this._onceEvents[t];
      for (;o;) {
        var r = s && s[o];
        if (r) {
          this.off(t, o);
          delete s[o];
        }
        o.apply(this, e);
        n += r ? 0 : 1;
        o = i[n];
      }
      return this;
    }
  }, t$$0;
}), function(t, e) {
  if ("function" == typeof define && define.amd) {
    define("get-size/get-size", [], function() {
      return e();
    });
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = e();
    } else {
      t.getSize = e();
    }
  }
}(window, function() {
  function t$$0(t) {
    var e = parseFloat(t);
    var i = -1 == t.indexOf("%") && !isNaN(e);
    return i && e;
  }
  function e$$0() {
  }
  function i$$0() {
    var t = {
      width : 0,
      height : 0,
      innerWidth : 0,
      innerHeight : 0,
      outerWidth : 0,
      outerHeight : 0
    };
    var e = 0;
    for (;h > e;e++) {
      var i = u[e];
      t[i] = 0;
    }
    return t;
  }
  function n(t) {
    var e = getComputedStyle(t);
    return e || a$$0("Style returned " + e + ". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"), e;
  }
  function o$$0() {
    if (!d$$0) {
      d$$0 = true;
      var e = document.createElement("div");
      e.style.width = "200px";
      e.style.padding = "1px 2px 3px 4px";
      e.style.borderStyle = "solid";
      e.style.borderWidth = "1px 2px 3px 4px";
      e.style.boxSizing = "border-box";
      var i = document.body || document.documentElement;
      i.appendChild(e);
      var o = n(e);
      s$$0.isBoxSizeOuter = r = 200 == t$$0(o.width);
      i.removeChild(e);
    }
  }
  function s$$0(e) {
    if (o$$0(), "string" == typeof e && (e = document.querySelector(e)), e && ("object" == typeof e && e.nodeType)) {
      var s = n(e);
      if ("none" == s.display) {
        return i$$0();
      }
      var a = {};
      a.width = e.offsetWidth;
      a.height = e.offsetHeight;
      var d = a.isBorderBox = "border-box" == s.boxSizing;
      var l = 0;
      for (;h > l;l++) {
        var f = u[l];
        var c = s[f];
        var m = parseFloat(c);
        a[f] = isNaN(m) ? 0 : m;
      }
      var p = a.paddingLeft + a.paddingRight;
      var y = a.paddingTop + a.paddingBottom;
      var g = a.marginLeft + a.marginRight;
      var v = a.marginTop + a.marginBottom;
      var _ = a.borderLeftWidth + a.borderRightWidth;
      var I = a.borderTopWidth + a.borderBottomWidth;
      var z = d && r;
      var x = t$$0(s.width);
      if (x !== false) {
        a.width = x + (z ? 0 : p + _);
      }
      var S = t$$0(s.height);
      return S !== false && (a.height = S + (z ? 0 : y + I)), a.innerWidth = a.width - (p + _), a.innerHeight = a.height - (y + I), a.outerWidth = a.width + g, a.outerHeight = a.height + v, a;
    }
  }
  var r;
  var a$$0 = "undefined" == typeof console ? e$$0 : function(t) {
    console.error(t);
  };
  var u = ["paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth"];
  var h = u.length;
  var d$$0 = false;
  return s$$0;
}), function(t, e) {
  if ("function" == typeof define && define.amd) {
    define("desandro-matches-selector/matches-selector", e);
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = e();
    } else {
      t.matchesSelector = e();
    }
  }
}(window, function() {
  var t$$0 = function() {
    var t = Element.prototype;
    if (t.matches) {
      return "matches";
    }
    if (t.matchesSelector) {
      return "matchesSelector";
    }
    var e = ["webkit", "moz", "ms", "o"];
    var i = 0;
    for (;i < e.length;i++) {
      var n = e[i];
      var o = n + "MatchesSelector";
      if (t[o]) {
        return o;
      }
    }
  }();
  return function(e, i) {
    return e[t$$0](i);
  };
}), function(t, e) {
  if ("function" == typeof define && define.amd) {
    define("fizzy-ui-utils/utils", ["desandro-matches-selector/matches-selector"], function(i) {
      return e(t, i);
    });
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = e(t, require("desandro-matches-selector"));
    } else {
      t.fizzyUIUtils = e(t, t.matchesSelector);
    }
  }
}(window, function(t$$1, e$$1) {
  var i$$0 = {};
  i$$0.extend = function(t, e) {
    var i;
    for (i in e) {
      t[i] = e[i];
    }
    return t;
  };
  i$$0.modulo = function(t, e) {
    return(t % e + e) % e;
  };
  i$$0.makeArray = function(t) {
    var e = [];
    if (Array.isArray(t)) {
      e = t;
    } else {
      if (t && "number" == typeof t.length) {
        var i = 0;
        for (;i < t.length;i++) {
          e.push(t[i]);
        }
      } else {
        e.push(t);
      }
    }
    return e;
  };
  i$$0.removeFrom = function(t, e) {
    var i = t.indexOf(e);
    if (-1 != i) {
      t.splice(i, 1);
    }
  };
  i$$0.getParent = function(t, i) {
    for (;t != document.body;) {
      if (t = t.parentNode, e$$1(t, i)) {
        return t;
      }
    }
  };
  i$$0.getQueryElement = function(t) {
    return "string" == typeof t ? document.querySelector(t) : t;
  };
  i$$0.handleEvent = function(t) {
    var e = "on" + t.type;
    if (this[e]) {
      this[e](t);
    }
  };
  i$$0.filterFindElements = function(t$$0, n) {
    t$$0 = i$$0.makeArray(t$$0);
    var o = [];
    return t$$0.forEach(function(t) {
      if (t instanceof HTMLElement) {
        if (!n) {
          return void o.push(t);
        }
        if (e$$1(t, n)) {
          o.push(t);
        }
        var i = t.querySelectorAll(n);
        var s = 0;
        for (;s < i.length;s++) {
          o.push(i[s]);
        }
      }
    }), o;
  };
  i$$0.debounceMethod = function(t$$0, e$$0, i) {
    var n = t$$0.prototype[e$$0];
    var o = e$$0 + "Timeout";
    t$$0.prototype[e$$0] = function() {
      var t = this[o];
      if (t) {
        clearTimeout(t);
      }
      var e = arguments;
      var s = this;
      this[o] = setTimeout(function() {
        n.apply(s, e);
        delete s[o];
      }, i || 100);
    };
  };
  i$$0.docReady = function(t) {
    var e = document.readyState;
    if ("complete" == e || "interactive" == e) {
      t();
    } else {
      document.addEventListener("DOMContentLoaded", t);
    }
  };
  i$$0.toDashed = function(t$$0) {
    return t$$0.replace(/(.)([A-Z])/g, function(t, e, i) {
      return e + "-" + i;
    }).toLowerCase();
  };
  var n$$0 = t$$1.console;
  return i$$0.htmlInit = function(e, o) {
    i$$0.docReady(function() {
      var s$$0 = i$$0.toDashed(o);
      var r = "data-" + s$$0;
      var a$$0 = document.querySelectorAll("[" + r + "]");
      var u$$0 = document.querySelectorAll(".js-" + s$$0);
      var h = i$$0.makeArray(a$$0).concat(i$$0.makeArray(u$$0));
      var d = r + "-options";
      var l = t$$1.jQuery;
      h.forEach(function(t) {
        var i;
        var s = t.getAttribute(r) || t.getAttribute(d);
        try {
          i = s && JSON.parse(s);
        } catch (a) {
          return void(n$$0 && n$$0.error("Error parsing " + r + " on " + t.className + ": " + a));
        }
        var u = new e(t, i);
        if (l) {
          l.data(t, o, u);
        }
      });
    });
  }, i$$0;
}), function(t, e) {
  if ("function" == typeof define && define.amd) {
    define("outlayer/item", ["ev-emitter/ev-emitter", "get-size/get-size"], e);
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = e(require("ev-emitter"), require("get-size"));
    } else {
      t.Outlayer = {};
      t.Outlayer.Item = e(t.EvEmitter, t.getSize);
    }
  }
}(window, function(t$$1, e$$0) {
  function i$$0(t) {
    var e;
    for (e in t) {
      return false;
    }
    return e = null, true;
  }
  function n$$0(t, e) {
    if (t) {
      this.element = t;
      this.layout = e;
      this.position = {
        x : 0,
        y : 0
      };
      this._create();
    }
  }
  function o$$0(t$$0) {
    return t$$0.replace(/([A-Z])/g, function(t) {
      return "-" + t.toLowerCase();
    });
  }
  var s$$0 = document.documentElement.style;
  var r$$0 = "string" == typeof s$$0.transition ? "transition" : "WebkitTransition";
  var a$$0 = "string" == typeof s$$0.transform ? "transform" : "WebkitTransform";
  var u$$0 = {
    WebkitTransition : "webkitTransitionEnd",
    transition : "transitionend"
  }[r$$0];
  var h$$0 = {
    transform : a$$0,
    transition : r$$0,
    transitionDuration : r$$0 + "Duration",
    transitionProperty : r$$0 + "Property",
    transitionDelay : r$$0 + "Delay"
  };
  var d$$0 = n$$0.prototype = Object.create(t$$1.prototype);
  d$$0.constructor = n$$0;
  d$$0._create = function() {
    this._transn = {
      ingProperties : {},
      clean : {},
      onEnd : {}
    };
    this.css({
      position : "absolute"
    });
  };
  d$$0.handleEvent = function(t) {
    var e = "on" + t.type;
    if (this[e]) {
      this[e](t);
    }
  };
  d$$0.getSize = function() {
    this.size = e$$0(this.element);
  };
  d$$0.css = function(t) {
    var e = this.element.style;
    var i;
    for (i in t) {
      var n = h$$0[i] || i;
      e[n] = t[i];
    }
  };
  d$$0.getPosition = function() {
    var t = getComputedStyle(this.element);
    var e = this.layout._getOption("originLeft");
    var i = this.layout._getOption("originTop");
    var n = t[e ? "left" : "right"];
    var o = t[i ? "top" : "bottom"];
    var s = this.layout.size;
    var r = -1 != n.indexOf("%") ? parseFloat(n) / 100 * s.width : parseInt(n, 10);
    var a = -1 != o.indexOf("%") ? parseFloat(o) / 100 * s.height : parseInt(o, 10);
    r = isNaN(r) ? 0 : r;
    a = isNaN(a) ? 0 : a;
    r -= e ? s.paddingLeft : s.paddingRight;
    a -= i ? s.paddingTop : s.paddingBottom;
    this.position.x = r;
    this.position.y = a;
  };
  d$$0.layoutPosition = function() {
    var t = this.layout.size;
    var e = {};
    var i = this.layout._getOption("originLeft");
    var n = this.layout._getOption("originTop");
    var o = i ? "paddingLeft" : "paddingRight";
    var s = i ? "left" : "right";
    var r = i ? "right" : "left";
    var a = this.position.x + t[o];
    e[s] = this.getXValue(a);
    e[r] = "";
    var u = n ? "paddingTop" : "paddingBottom";
    var h = n ? "top" : "bottom";
    var d = n ? "bottom" : "top";
    var l = this.position.y + t[u];
    e[h] = this.getYValue(l);
    e[d] = "";
    this.css(e);
    this.emitEvent("layout", [this]);
  };
  d$$0.getXValue = function(t) {
    var e = this.layout._getOption("horizontal");
    return this.layout.options.percentPosition && !e ? t / this.layout.size.width * 100 + "%" : t + "px";
  };
  d$$0.getYValue = function(t) {
    var e = this.layout._getOption("horizontal");
    return this.layout.options.percentPosition && e ? t / this.layout.size.height * 100 + "%" : t + "px";
  };
  d$$0._transitionTo = function(t, e) {
    this.getPosition();
    var i = this.position.x;
    var n = this.position.y;
    var o = parseInt(t, 10);
    var s = parseInt(e, 10);
    var r = o === this.position.x && s === this.position.y;
    if (this.setPosition(t, e), r && !this.isTransitioning) {
      return void this.layoutPosition();
    }
    var a = t - i;
    var u = e - n;
    var h = {};
    h.transform = this.getTranslate(a, u);
    this.transition({
      to : h,
      onTransitionEnd : {
        transform : this.layoutPosition
      },
      isCleaning : true
    });
  };
  d$$0.getTranslate = function(t, e) {
    var i = this.layout._getOption("originLeft");
    var n = this.layout._getOption("originTop");
    return t = i ? t : -t, e = n ? e : -e, "translate3d(" + t + "px, " + e + "px, 0)";
  };
  d$$0.goTo = function(t, e) {
    this.setPosition(t, e);
    this.layoutPosition();
  };
  d$$0.moveTo = d$$0._transitionTo;
  d$$0.setPosition = function(t, e) {
    this.position.x = parseInt(t, 10);
    this.position.y = parseInt(e, 10);
  };
  d$$0._nonTransition = function(t) {
    this.css(t.to);
    if (t.isCleaning) {
      this._removeStyles(t.to);
    }
    var e;
    for (e in t.onTransitionEnd) {
      t.onTransitionEnd[e].call(this);
    }
  };
  d$$0.transition = function(t) {
    if (!parseFloat(this.layout.options.transitionDuration)) {
      return void this._nonTransition(t);
    }
    var e = this._transn;
    var i;
    for (i in t.onTransitionEnd) {
      e.onEnd[i] = t.onTransitionEnd[i];
    }
    for (i in t.to) {
      e.ingProperties[i] = true;
      if (t.isCleaning) {
        e.clean[i] = true;
      }
    }
    if (t.from) {
      this.css(t.from);
      var n = this.element.offsetHeight;
      n = null;
    }
    this.enableTransition(t.to);
    this.css(t.to);
    this.isTransitioning = true;
  };
  var l$$0 = "opacity," + o$$0(a$$0);
  d$$0.enableTransition = function() {
    if (!this.isTransitioning) {
      var t = this.layout.options.transitionDuration;
      t = "number" == typeof t ? t + "ms" : t;
      this.css({
        transitionProperty : l$$0,
        transitionDuration : t,
        transitionDelay : this.staggerDelay || 0
      });
      this.element.addEventListener(u$$0, this, false);
    }
  };
  d$$0.onwebkitTransitionEnd = function(t) {
    this.ontransitionend(t);
  };
  d$$0.onotransitionend = function(t) {
    this.ontransitionend(t);
  };
  var f = {
    "-webkit-transform" : "transform"
  };
  d$$0.ontransitionend = function(t) {
    if (t.target === this.element) {
      var e = this._transn;
      var n = f[t.propertyName] || t.propertyName;
      if (delete e.ingProperties[n], i$$0(e.ingProperties) && this.disableTransition(), n in e.clean && (this.element.style[t.propertyName] = "", delete e.clean[n]), n in e.onEnd) {
        var o = e.onEnd[n];
        o.call(this);
        delete e.onEnd[n];
      }
      this.emitEvent("transitionEnd", [this]);
    }
  };
  d$$0.disableTransition = function() {
    this.removeTransitionStyles();
    this.element.removeEventListener(u$$0, this, false);
    this.isTransitioning = false;
  };
  d$$0._removeStyles = function(t) {
    var e = {};
    var i;
    for (i in t) {
      e[i] = "";
    }
    this.css(e);
  };
  var c = {
    transitionProperty : "",
    transitionDuration : "",
    transitionDelay : ""
  };
  return d$$0.removeTransitionStyles = function() {
    this.css(c);
  }, d$$0.stagger = function(t) {
    t = isNaN(t) ? 0 : t;
    this.staggerDelay = t + "ms";
  }, d$$0.removeElem = function() {
    this.element.parentNode.removeChild(this.element);
    this.css({
      display : ""
    });
    this.emitEvent("remove", [this]);
  }, d$$0.remove = function() {
    return r$$0 && parseFloat(this.layout.options.transitionDuration) ? (this.once("transitionEnd", function() {
      this.removeElem();
    }), void this.hide()) : void this.removeElem();
  }, d$$0.reveal = function() {
    delete this.isHidden;
    this.css({
      display : ""
    });
    var t = this.layout.options;
    var e = {};
    var i = this.getHideRevealTransitionEndProperty("visibleStyle");
    e[i] = this.onRevealTransitionEnd;
    this.transition({
      from : t.hiddenStyle,
      to : t.visibleStyle,
      isCleaning : true,
      onTransitionEnd : e
    });
  }, d$$0.onRevealTransitionEnd = function() {
    if (!this.isHidden) {
      this.emitEvent("reveal");
    }
  }, d$$0.getHideRevealTransitionEndProperty = function(t) {
    var e = this.layout.options[t];
    if (e.opacity) {
      return "opacity";
    }
    var i;
    for (i in e) {
      return i;
    }
  }, d$$0.hide = function() {
    this.isHidden = true;
    this.css({
      display : ""
    });
    var t = this.layout.options;
    var e = {};
    var i = this.getHideRevealTransitionEndProperty("hiddenStyle");
    e[i] = this.onHideTransitionEnd;
    this.transition({
      from : t.visibleStyle,
      to : t.hiddenStyle,
      isCleaning : true,
      onTransitionEnd : e
    });
  }, d$$0.onHideTransitionEnd = function() {
    if (this.isHidden) {
      this.css({
        display : "none"
      });
      this.emitEvent("hide");
    }
  }, d$$0.destroy = function() {
    this.css({
      position : "",
      left : "",
      right : "",
      top : "",
      bottom : "",
      transition : "",
      transform : ""
    });
  }, n$$0;
}), function(t, e) {
  if ("function" == typeof define && define.amd) {
    define("outlayer/outlayer", ["ev-emitter/ev-emitter", "get-size/get-size", "fizzy-ui-utils/utils", "./item"], function(i, n, o, s) {
      return e(t, i, n, o, s);
    });
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = e(t, require("ev-emitter"), require("get-size"), require("fizzy-ui-utils"), require("./item"));
    } else {
      t.Outlayer = e(t, t.EvEmitter, t.getSize, t.fizzyUIUtils, t.Outlayer.Item);
    }
  }
}(window, function(t$$1, e$$1, i$$0, n$$0, o$$0) {
  function s$$0(t, e) {
    var i = n$$0.getQueryElement(t);
    if (!i) {
      return void(u && u.error("Bad element for " + this.constructor.namespace + ": " + (i || t)));
    }
    this.element = i;
    if (h) {
      this.$element = h(this.element);
    }
    this.options = n$$0.extend({}, this.constructor.defaults);
    this.option(e);
    var o = ++l;
    this.element.outlayerGUID = o;
    f[o] = this;
    this._create();
    var s = this._getOption("initLayout");
    if (s) {
      this.layout();
    }
  }
  function r$$0(t) {
    function e() {
      t.apply(this, arguments);
    }
    return e.prototype = Object.create(t.prototype), e.prototype.constructor = e, e;
  }
  function a(t) {
    if ("number" == typeof t) {
      return t;
    }
    var e = t.match(/(^\d*\.?\d*)(\w*)/);
    var i = e && e[1];
    var n = e && e[2];
    if (!i.length) {
      return 0;
    }
    i = parseFloat(i);
    var o = m[n] || 1;
    return i * o;
  }
  var u = t$$1.console;
  var h = t$$1.jQuery;
  var d = function() {
  };
  var l = 0;
  var f = {};
  s$$0.namespace = "outlayer";
  s$$0.Item = o$$0;
  s$$0.defaults = {
    containerStyle : {
      position : "relative"
    },
    initLayout : true,
    originLeft : true,
    originTop : true,
    resize : true,
    resizeContainer : true,
    transitionDuration : "0.4s",
    hiddenStyle : {
      opacity : 0,
      transform : "scale(0.001)"
    },
    visibleStyle : {
      opacity : 1,
      transform : "scale(1)"
    }
  };
  var c = s$$0.prototype;
  n$$0.extend(c, e$$1.prototype);
  c.option = function(t) {
    n$$0.extend(this.options, t);
  };
  c._getOption = function(t) {
    var e = this.constructor.compatOptions[t];
    return e && void 0 !== this.options[e] ? this.options[e] : this.options[t];
  };
  s$$0.compatOptions = {
    initLayout : "isInitLayout",
    horizontal : "isHorizontal",
    layoutInstant : "isLayoutInstant",
    originLeft : "isOriginLeft",
    originTop : "isOriginTop",
    resize : "isResizeBound",
    resizeContainer : "isResizingContainer"
  };
  c._create = function() {
    this.reloadItems();
    this.stamps = [];
    this.stamp(this.options.stamp);
    n$$0.extend(this.element.style, this.options.containerStyle);
    var t = this._getOption("resize");
    if (t) {
      this.bindResize();
    }
  };
  c.reloadItems = function() {
    this.items = this._itemize(this.element.children);
  };
  c._itemize = function(t) {
    var e = this._filterFindItemElements(t);
    var i = this.constructor.Item;
    var n = [];
    var o = 0;
    for (;o < e.length;o++) {
      var s = e[o];
      var r = new i(s, this);
      n.push(r);
    }
    return n;
  };
  c._filterFindItemElements = function(t) {
    return n$$0.filterFindElements(t, this.options.itemSelector);
  };
  c.getItemElements = function() {
    return this.items.map(function(t) {
      return t.element;
    });
  };
  c.layout = function() {
    this._resetLayout();
    this._manageStamps();
    var t = this._getOption("layoutInstant");
    var e = void 0 !== t ? t : !this._isLayoutInited;
    this.layoutItems(this.items, e);
    this._isLayoutInited = true;
  };
  c._init = c.layout;
  c._resetLayout = function() {
    this.getSize();
  };
  c.getSize = function() {
    this.size = i$$0(this.element);
  };
  c._getMeasurement = function(t, e) {
    var n;
    var o = this.options[t];
    if (o) {
      if ("string" == typeof o) {
        n = this.element.querySelector(o);
      } else {
        if (o instanceof HTMLElement) {
          n = o;
        }
      }
      this[t] = n ? i$$0(n)[e] : o;
    } else {
      this[t] = 0;
    }
  };
  c.layoutItems = function(t, e) {
    t = this._getItemsForLayout(t);
    this._layoutItems(t, e);
    this._postLayout();
  };
  c._getItemsForLayout = function(t$$0) {
    return t$$0.filter(function(t) {
      return!t.isIgnored;
    });
  };
  c._layoutItems = function(t$$0, e) {
    if (this._emitCompleteOnItems("layout", t$$0), t$$0 && t$$0.length) {
      var i = [];
      t$$0.forEach(function(t) {
        var n = this._getItemLayoutPosition(t);
        n.item = t;
        n.isInstant = e || t.isLayoutInstant;
        i.push(n);
      }, this);
      this._processLayoutQueue(i);
    }
  };
  c._getItemLayoutPosition = function() {
    return{
      x : 0,
      y : 0
    };
  };
  c._processLayoutQueue = function(t$$0) {
    this.updateStagger();
    t$$0.forEach(function(t, e) {
      this._positionItem(t.item, t.x, t.y, t.isInstant, e);
    }, this);
  };
  c.updateStagger = function() {
    var t = this.options.stagger;
    return null === t || void 0 === t ? void(this.stagger = 0) : (this.stagger = a(t), this.stagger);
  };
  c._positionItem = function(t, e, i, n, o) {
    if (n) {
      t.goTo(e, i);
    } else {
      t.stagger(o * this.stagger);
      t.moveTo(e, i);
    }
  };
  c._postLayout = function() {
    this.resizeContainer();
  };
  c.resizeContainer = function() {
    var t = this._getOption("resizeContainer");
    if (t) {
      var e = this._getContainerSize();
      if (e) {
        this._setContainerMeasure(e.width, true);
        this._setContainerMeasure(e.height, false);
      }
    }
  };
  c._getContainerSize = d;
  c._setContainerMeasure = function(t, e) {
    if (void 0 !== t) {
      var i = this.size;
      if (i.isBorderBox) {
        t += e ? i.paddingLeft + i.paddingRight + i.borderLeftWidth + i.borderRightWidth : i.paddingBottom + i.paddingTop + i.borderTopWidth + i.borderBottomWidth;
      }
      t = Math.max(t, 0);
      this.element.style[e ? "width" : "height"] = t + "px";
    }
  };
  c._emitCompleteOnItems = function(t, e$$0) {
    function i() {
      o.dispatchEvent(t + "Complete", null, [e$$0]);
    }
    function n() {
      r++;
      if (r == s) {
        i();
      }
    }
    var o = this;
    var s = e$$0.length;
    if (!e$$0 || !s) {
      return void i();
    }
    var r = 0;
    e$$0.forEach(function(e) {
      e.once(t, n);
    });
  };
  c.dispatchEvent = function(t, e, i) {
    var n = e ? [e].concat(i) : i;
    if (this.emitEvent(t, n), h) {
      if (this.$element = this.$element || h(this.element), e) {
        var o = h.Event(e);
        o.type = t;
        this.$element.trigger(o, i);
      } else {
        this.$element.trigger(t, i);
      }
    }
  };
  c.ignore = function(t) {
    var e = this.getItem(t);
    if (e) {
      e.isIgnored = true;
    }
  };
  c.unignore = function(t) {
    var e = this.getItem(t);
    if (e) {
      delete e.isIgnored;
    }
  };
  c.stamp = function(t) {
    t = this._find(t);
    if (t) {
      this.stamps = this.stamps.concat(t);
      t.forEach(this.ignore, this);
    }
  };
  c.unstamp = function(t$$0) {
    t$$0 = this._find(t$$0);
    if (t$$0) {
      t$$0.forEach(function(t) {
        n$$0.removeFrom(this.stamps, t);
        this.unignore(t);
      }, this);
    }
  };
  c._find = function(t) {
    return t ? ("string" == typeof t && (t = this.element.querySelectorAll(t)), t = n$$0.makeArray(t)) : void 0;
  };
  c._manageStamps = function() {
    if (this.stamps) {
      if (this.stamps.length) {
        this._getBoundingRect();
        this.stamps.forEach(this._manageStamp, this);
      }
    }
  };
  c._getBoundingRect = function() {
    var t = this.element.getBoundingClientRect();
    var e = this.size;
    this._boundingRect = {
      left : t.left + e.paddingLeft + e.borderLeftWidth,
      top : t.top + e.paddingTop + e.borderTopWidth,
      right : t.right - (e.paddingRight + e.borderRightWidth),
      bottom : t.bottom - (e.paddingBottom + e.borderBottomWidth)
    };
  };
  c._manageStamp = d;
  c._getElementOffset = function(t) {
    var e = t.getBoundingClientRect();
    var n = this._boundingRect;
    var o = i$$0(t);
    var s = {
      left : e.left - n.left - o.marginLeft,
      top : e.top - n.top - o.marginTop,
      right : n.right - e.right - o.marginRight,
      bottom : n.bottom - e.bottom - o.marginBottom
    };
    return s;
  };
  c.handleEvent = n$$0.handleEvent;
  c.bindResize = function() {
    t$$1.addEventListener("resize", this);
    this.isResizeBound = true;
  };
  c.unbindResize = function() {
    t$$1.removeEventListener("resize", this);
    this.isResizeBound = false;
  };
  c.onresize = function() {
    this.resize();
  };
  n$$0.debounceMethod(s$$0, "onresize", 100);
  c.resize = function() {
    if (this.isResizeBound) {
      if (this.needsResizeLayout()) {
        this.layout();
      }
    }
  };
  c.needsResizeLayout = function() {
    var t = i$$0(this.element);
    var e = this.size && t;
    return e && t.innerWidth !== this.size.innerWidth;
  };
  c.addItems = function(t) {
    var e = this._itemize(t);
    return e.length && (this.items = this.items.concat(e)), e;
  };
  c.appended = function(t) {
    var e = this.addItems(t);
    if (e.length) {
      this.layoutItems(e, true);
      this.reveal(e);
    }
  };
  c.prepended = function(t) {
    var e = this._itemize(t);
    if (e.length) {
      var i = this.items.slice(0);
      this.items = e.concat(i);
      this._resetLayout();
      this._manageStamps();
      this.layoutItems(e, true);
      this.reveal(e);
      this.layoutItems(i);
    }
  };
  c.reveal = function(t$$0) {
    if (this._emitCompleteOnItems("reveal", t$$0), t$$0 && t$$0.length) {
      var e = this.updateStagger();
      t$$0.forEach(function(t, i) {
        t.stagger(i * e);
        t.reveal();
      });
    }
  };
  c.hide = function(t$$0) {
    if (this._emitCompleteOnItems("hide", t$$0), t$$0 && t$$0.length) {
      var e = this.updateStagger();
      t$$0.forEach(function(t, i) {
        t.stagger(i * e);
        t.hide();
      });
    }
  };
  c.revealItemElements = function(t) {
    var e = this.getItems(t);
    this.reveal(e);
  };
  c.hideItemElements = function(t) {
    var e = this.getItems(t);
    this.hide(e);
  };
  c.getItem = function(t) {
    var e = 0;
    for (;e < this.items.length;e++) {
      var i = this.items[e];
      if (i.element == t) {
        return i;
      }
    }
  };
  c.getItems = function(t$$0) {
    t$$0 = n$$0.makeArray(t$$0);
    var e = [];
    return t$$0.forEach(function(t) {
      var i = this.getItem(t);
      if (i) {
        e.push(i);
      }
    }, this), e;
  };
  c.remove = function(t$$0) {
    var e = this.getItems(t$$0);
    this._emitCompleteOnItems("remove", e);
    if (e) {
      if (e.length) {
        e.forEach(function(t) {
          t.remove();
          n$$0.removeFrom(this.items, t);
        }, this);
      }
    }
  };
  c.destroy = function() {
    var t$$0 = this.element.style;
    t$$0.height = "";
    t$$0.position = "";
    t$$0.width = "";
    this.items.forEach(function(t) {
      t.destroy();
    });
    this.unbindResize();
    var e = this.element.outlayerGUID;
    delete f[e];
    delete this.element.outlayerGUID;
    if (h) {
      h.removeData(this.element, this.constructor.namespace);
    }
  };
  s$$0.data = function(t) {
    t = n$$0.getQueryElement(t);
    var e = t && t.outlayerGUID;
    return e && f[e];
  };
  s$$0.create = function(t, e) {
    var i = r$$0(s$$0);
    return i.defaults = n$$0.extend({}, s$$0.defaults), n$$0.extend(i.defaults, e), i.compatOptions = n$$0.extend({}, s$$0.compatOptions), i.namespace = t, i.data = s$$0.data, i.Item = r$$0(o$$0), n$$0.htmlInit(i, t), h && (h.bridget && h.bridget(t, i)), i;
  };
  var m = {
    ms : 1,
    s : 1E3
  };
  return s$$0.Item = o$$0, s$$0;
}), function(t, e) {
  if ("function" == typeof define && define.amd) {
    define("isotope/js/item", ["outlayer/outlayer"], e);
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = e(require("outlayer"));
    } else {
      t.Isotope = t.Isotope || {};
      t.Isotope.Item = e(t.Outlayer);
    }
  }
}(window, function(t$$0) {
  function e$$0() {
    t$$0.Item.apply(this, arguments);
  }
  var i$$0 = e$$0.prototype = Object.create(t$$0.Item.prototype);
  var n$$0 = i$$0._create;
  i$$0._create = function() {
    this.id = this.layout.itemGUID++;
    n$$0.call(this);
    this.sortData = {};
  };
  i$$0.updateSortData = function() {
    if (!this.isIgnored) {
      this.sortData.id = this.id;
      this.sortData["original-order"] = this.id;
      this.sortData.random = Math.random();
      var t = this.layout.options.getSortData;
      var e = this.layout._sorters;
      var i;
      for (i in t) {
        var n = e[i];
        this.sortData[i] = n(this.element, this);
      }
    }
  };
  var o = i$$0.destroy;
  return i$$0.destroy = function() {
    o.apply(this, arguments);
    this.css({
      display : ""
    });
  }, e$$0;
}), function(t, e) {
  if ("function" == typeof define && define.amd) {
    define("isotope/js/layout-mode", ["get-size/get-size", "outlayer/outlayer"], e);
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = e(require("get-size"), require("outlayer"));
    } else {
      t.Isotope = t.Isotope || {};
      t.Isotope.LayoutMode = e(t.getSize, t.Outlayer);
    }
  }
}(window, function(t$$0, e$$0) {
  function i$$0(t) {
    this.isotope = t;
    if (t) {
      this.options = t.options[this.namespace];
      this.element = t.element;
      this.items = t.filteredItems;
      this.size = t.size;
    }
  }
  var n$$0 = i$$0.prototype;
  var o$$0 = ["_resetLayout", "_getItemLayoutPosition", "_manageStamp", "_getContainerSize", "_getElementOffset", "needsResizeLayout", "_getOption"];
  return o$$0.forEach(function(t) {
    n$$0[t] = function() {
      return e$$0.prototype[t].apply(this.isotope, arguments);
    };
  }), n$$0.needsVerticalResizeLayout = function() {
    var e = t$$0(this.isotope.element);
    var i = this.isotope.size && e;
    return i && e.innerHeight != this.isotope.size.innerHeight;
  }, n$$0._getMeasurement = function() {
    this.isotope._getMeasurement.apply(this, arguments);
  }, n$$0.getColumnWidth = function() {
    this.getSegmentSize("column", "Width");
  }, n$$0.getRowHeight = function() {
    this.getSegmentSize("row", "Height");
  }, n$$0.getSegmentSize = function(t, e) {
    var i = t + e;
    var n = "outer" + e;
    if (this._getMeasurement(i, n), !this[i]) {
      var o = this.getFirstItemSize();
      this[i] = o && o[n] || this.isotope.size["inner" + e];
    }
  }, n$$0.getFirstItemSize = function() {
    var e = this.isotope.filteredItems[0];
    return e && (e.element && t$$0(e.element));
  }, n$$0.layout = function() {
    this.isotope.layout.apply(this.isotope, arguments);
  }, n$$0.getSize = function() {
    this.isotope.getSize();
    this.size = this.isotope.size;
  }, i$$0.modes = {}, i$$0.create = function(t, e) {
    function o() {
      i$$0.apply(this, arguments);
    }
    return o.prototype = Object.create(n$$0), o.prototype.constructor = o, e && (o.options = e), o.prototype.namespace = t, i$$0.modes[t] = o, o;
  }, i$$0;
}), function(t, e) {
  if ("function" == typeof define && define.amd) {
    define("masonry/masonry", ["outlayer/outlayer", "get-size/get-size"], e);
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = e(require("outlayer"), require("get-size"));
    } else {
      t.Masonry = e(t.Outlayer, t.getSize);
    }
  }
}(window, function(t$$0, e$$0) {
  var i$$0 = t$$0.create("masonry");
  return i$$0.compatOptions.fitWidth = "isFitWidth", i$$0.prototype._resetLayout = function() {
    this.getSize();
    this._getMeasurement("columnWidth", "outerWidth");
    this._getMeasurement("gutter", "outerWidth");
    this.measureColumns();
    this.colYs = [];
    var t = 0;
    for (;t < this.cols;t++) {
      this.colYs.push(0);
    }
    this.maxY = 0;
  }, i$$0.prototype.measureColumns = function() {
    if (this.getContainerWidth(), !this.columnWidth) {
      var t = this.items[0];
      var i = t && t.element;
      this.columnWidth = i && e$$0(i).outerWidth || this.containerWidth;
    }
    var n = this.columnWidth += this.gutter;
    var o = this.containerWidth + this.gutter;
    var s = o / n;
    var r = n - o % n;
    var a = r && 1 > r ? "round" : "floor";
    s = Math[a](s);
    this.cols = Math.max(s, 1);
  }, i$$0.prototype.getContainerWidth = function() {
    var t = this._getOption("fitWidth");
    var i = t ? this.element.parentNode : this.element;
    var n = e$$0(i);
    this.containerWidth = n && n.innerWidth;
  }, i$$0.prototype._getItemLayoutPosition = function(t) {
    t.getSize();
    var e = t.size.outerWidth % this.columnWidth;
    var i = e && 1 > e ? "round" : "ceil";
    var n = Math[i](t.size.outerWidth / this.columnWidth);
    n = Math.min(n, this.cols);
    var o = this._getColGroup(n);
    var s = Math.min.apply(Math, o);
    var r = o.indexOf(s);
    var a = {
      x : this.columnWidth * r,
      y : s
    };
    var u = s + t.size.outerHeight;
    var h = this.cols + 1 - o.length;
    var d = 0;
    for (;h > d;d++) {
      this.colYs[r + d] = u;
    }
    return a;
  }, i$$0.prototype._getColGroup = function(t) {
    if (2 > t) {
      return this.colYs;
    }
    var e = [];
    var i = this.cols + 1 - t;
    var n = 0;
    for (;i > n;n++) {
      var o = this.colYs.slice(n, n + t);
      e[n] = Math.max.apply(Math, o);
    }
    return e;
  }, i$$0.prototype._manageStamp = function(t) {
    var i = e$$0(t);
    var n = this._getElementOffset(t);
    var o = this._getOption("originLeft");
    var s = o ? n.left : n.right;
    var r = s + i.outerWidth;
    var a = Math.floor(s / this.columnWidth);
    a = Math.max(0, a);
    var u = Math.floor(r / this.columnWidth);
    u -= r % this.columnWidth ? 0 : 1;
    u = Math.min(this.cols - 1, u);
    var h = this._getOption("originTop");
    var d = (h ? n.top : n.bottom) + i.outerHeight;
    var l = a;
    for (;u >= l;l++) {
      this.colYs[l] = Math.max(d, this.colYs[l]);
    }
  }, i$$0.prototype._getContainerSize = function() {
    this.maxY = Math.max.apply(Math, this.colYs);
    var t = {
      height : this.maxY
    };
    return this._getOption("fitWidth") && (t.width = this._getContainerFitWidth()), t;
  }, i$$0.prototype._getContainerFitWidth = function() {
    var t = 0;
    var e = this.cols;
    for (;--e && 0 === this.colYs[e];) {
      t++;
    }
    return(this.cols - t) * this.columnWidth - this.gutter;
  }, i$$0.prototype.needsResizeLayout = function() {
    var t = this.containerWidth;
    return this.getContainerWidth(), t != this.containerWidth;
  }, i$$0;
}), function(t, e) {
  if ("function" == typeof define && define.amd) {
    define("isotope/js/layout-modes/masonry", ["../layout-mode", "masonry/masonry"], e);
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = e(require("../layout-mode"), require("masonry-layout"));
    } else {
      e(t.Isotope.LayoutMode, t.Masonry);
    }
  }
}(window, function(t$$0, e) {
  var i = t$$0.create("masonry");
  var n = i.prototype;
  var o = {
    _getElementOffset : true,
    layout : true,
    _getMeasurement : true
  };
  var s;
  for (s in e.prototype) {
    if (!o[s]) {
      n[s] = e.prototype[s];
    }
  }
  var r = n.measureColumns;
  n.measureColumns = function() {
    this.items = this.isotope.filteredItems;
    r.call(this);
  };
  var a = n._getOption;
  return n._getOption = function(t) {
    return "fitWidth" == t ? void 0 !== this.options.isFitWidth ? this.options.isFitWidth : this.options.fitWidth : a.apply(this.isotope, arguments);
  }, i;
}), function(t, e) {
  if ("function" == typeof define && define.amd) {
    define("isotope/js/layout-modes/fit-rows", ["../layout-mode"], e);
  } else {
    if ("object" == typeof exports) {
      module.exports = e(require("../layout-mode"));
    } else {
      e(t.Isotope.LayoutMode);
    }
  }
}(window, function(t$$0) {
  var e$$0 = t$$0.create("fitRows");
  var i$$0 = e$$0.prototype;
  return i$$0._resetLayout = function() {
    this.x = 0;
    this.y = 0;
    this.maxY = 0;
    this._getMeasurement("gutter", "outerWidth");
  }, i$$0._getItemLayoutPosition = function(t) {
    t.getSize();
    var e = t.size.outerWidth + this.gutter;
    var i = this.isotope.size.innerWidth + this.gutter;
    if (0 !== this.x) {
      if (e + this.x > i) {
        this.x = 0;
        this.y = this.maxY;
      }
    }
    var n = {
      x : this.x,
      y : this.y
    };
    return this.maxY = Math.max(this.maxY, this.y + t.size.outerHeight), this.x += e, n;
  }, i$$0._getContainerSize = function() {
    return{
      height : this.maxY
    };
  }, e$$0;
}), function(t, e) {
  if ("function" == typeof define && define.amd) {
    define("isotope/js/layout-modes/vertical", ["../layout-mode"], e);
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = e(require("../layout-mode"));
    } else {
      e(t.Isotope.LayoutMode);
    }
  }
}(window, function(t$$0) {
  var e$$0 = t$$0.create("vertical", {
    horizontalAlignment : 0
  });
  var i$$0 = e$$0.prototype;
  return i$$0._resetLayout = function() {
    this.y = 0;
  }, i$$0._getItemLayoutPosition = function(t) {
    t.getSize();
    var e = (this.isotope.size.innerWidth - t.size.outerWidth) * this.options.horizontalAlignment;
    var i = this.y;
    return this.y += t.size.outerHeight, {
      x : e,
      y : i
    };
  }, i$$0._getContainerSize = function() {
    return{
      height : this.y
    };
  }, e$$0;
}), function(t, e) {
  if ("function" == typeof define && define.amd) {
    define(["outlayer/outlayer", "get-size/get-size", "desandro-matches-selector/matches-selector", "fizzy-ui-utils/utils", "isotope/js/item", "isotope/js/layout-mode", "isotope/js/layout-modes/masonry", "isotope/js/layout-modes/fit-rows", "isotope/js/layout-modes/vertical"], function(i, n, o, s, r, a) {
      return e(t, i, n, o, s, r, a);
    });
  } else {
    if ("object" == typeof module && module.exports) {
      module.exports = e(t, require("outlayer"), require("get-size"), require("desandro-matches-selector"), require("fizzy-ui-utils"), require("isotope/js/item"), require("isotope/js/layout-mode"), require("isotope/js/layout-modes/masonry"), require("isotope/js/layout-modes/fit-rows"), require("isotope/js/layout-modes/vertical"));
    } else {
      t.Isotope = e(t, t.Outlayer, t.getSize, t.matchesSelector, t.fizzyUIUtils, t.Isotope.Item, t.Isotope.LayoutMode);
    }
  }
}(window, function(t$$2, e$$2, i$$0, n$$0, o$$0, s$$0, r$$0) {
  function a$$0(t, e) {
    return function(i, n) {
      var o = 0;
      for (;o < t.length;o++) {
        var s = t[o];
        var r = i.sortData[s];
        var a = n.sortData[s];
        if (r > a || a > r) {
          var u = void 0 !== e[s] ? e[s] : e;
          var h = u ? 1 : -1;
          return(r > a ? 1 : -1) * h;
        }
      }
      return 0;
    };
  }
  var u$$0 = t$$2.jQuery;
  var h$$0 = String.prototype.trim ? function(t) {
    return t.trim();
  } : function(t) {
    return t.replace(/^\s+|\s+$/g, "");
  };
  var d = e$$2.create("isotope", {
    layoutMode : "masonry",
    isJQueryFiltering : true,
    sortAscending : true
  });
  d.Item = s$$0;
  d.LayoutMode = r$$0;
  var l = d.prototype;
  l._create = function() {
    this.itemGUID = 0;
    this._sorters = {};
    this._getSorters();
    e$$2.prototype._create.call(this);
    this.modes = {};
    this.filteredItems = this.items;
    this.sortHistory = ["original-order"];
    var t;
    for (t in r$$0.modes) {
      this._initLayoutMode(t);
    }
  };
  l.reloadItems = function() {
    this.itemGUID = 0;
    e$$2.prototype.reloadItems.call(this);
  };
  l._itemize = function() {
    var t = e$$2.prototype._itemize.apply(this, arguments);
    var i = 0;
    for (;i < t.length;i++) {
      var n = t[i];
      n.id = this.itemGUID++;
    }
    return this._updateItemsSortData(t), t;
  };
  l._initLayoutMode = function(t) {
    var e = r$$0.modes[t];
    var i = this.options[t] || {};
    this.options[t] = e.options ? o$$0.extend(e.options, i) : i;
    this.modes[t] = new e(this);
  };
  l.layout = function() {
    return!this._isLayoutInited && this._getOption("initLayout") ? void this.arrange() : void this._layout();
  };
  l._layout = function() {
    var t = this._getIsInstant();
    this._resetLayout();
    this._manageStamps();
    this.layoutItems(this.filteredItems, t);
    this._isLayoutInited = true;
  };
  l.arrange = function(t) {
    this.option(t);
    this._getIsInstant();
    var e = this._filter(this.items);
    this.filteredItems = e.matches;
    this._bindArrangeComplete();
    if (this._isInstant) {
      this._noTransition(this._hideReveal, [e]);
    } else {
      this._hideReveal(e);
    }
    this._sort();
    this._layout();
  };
  l._init = l.arrange;
  l._hideReveal = function(t) {
    this.reveal(t.needReveal);
    this.hide(t.needHide);
  };
  l._getIsInstant = function() {
    var t = this._getOption("layoutInstant");
    var e = void 0 !== t ? t : !this._isLayoutInited;
    return this._isInstant = e, e;
  };
  l._bindArrangeComplete = function() {
    function t() {
      if (e) {
        if (i) {
          if (n) {
            o.dispatchEvent("arrangeComplete", null, [o.filteredItems]);
          }
        }
      }
    }
    var e;
    var i;
    var n;
    var o = this;
    this.once("layoutComplete", function() {
      e = true;
      t();
    });
    this.once("hideComplete", function() {
      i = true;
      t();
    });
    this.once("revealComplete", function() {
      n = true;
      t();
    });
  };
  l._filter = function(t) {
    var e = this.options.filter;
    e = e || "*";
    var i = [];
    var n = [];
    var o = [];
    var s = this._getFilterTest(e);
    var r = 0;
    for (;r < t.length;r++) {
      var a = t[r];
      if (!a.isIgnored) {
        var u = s(a);
        if (u) {
          i.push(a);
        }
        if (u && a.isHidden) {
          n.push(a);
        } else {
          if (!u) {
            if (!a.isHidden) {
              o.push(a);
            }
          }
        }
      }
    }
    return{
      matches : i,
      needReveal : n,
      needHide : o
    };
  };
  l._getFilterTest = function(t) {
    return u$$0 && this.options.isJQueryFiltering ? function(e) {
      return u$$0(e.element).is(t);
    } : "function" == typeof t ? function(e) {
      return t(e.element);
    } : function(e) {
      return n$$0(e.element, t);
    };
  };
  l.updateSortData = function(t) {
    var e;
    if (t) {
      t = o$$0.makeArray(t);
      e = this.getItems(t);
    } else {
      e = this.items;
    }
    this._getSorters();
    this._updateItemsSortData(e);
  };
  l._getSorters = function() {
    var t = this.options.getSortData;
    var e;
    for (e in t) {
      var i = t[e];
      this._sorters[e] = f(i);
    }
  };
  l._updateItemsSortData = function(t) {
    var e = t && t.length;
    var i = 0;
    for (;e && e > i;i++) {
      var n = t[i];
      n.updateSortData();
    }
  };
  var f = function() {
    function t$$1(t$$0) {
      if ("string" != typeof t$$0) {
        return t$$0;
      }
      var i = h$$0(t$$0).split(" ");
      var n = i[0];
      var o = n.match(/^\[(.+)\]$/);
      var s = o && o[1];
      var r = e$$1(s, n);
      var a = d.sortDataParsers[i[1]];
      return t$$0 = a ? function(t) {
        return t && a(r(t));
      } : function(t) {
        return t && r(t);
      };
    }
    function e$$1(t$$0, e$$0) {
      return t$$0 ? function(e) {
        return e.getAttribute(t$$0);
      } : function(t) {
        var i = t.querySelector(e$$0);
        return i && i.textContent;
      };
    }
    return t$$1;
  }();
  d.sortDataParsers = {
    parseInt : function(t) {
      return parseInt(t, 10);
    },
    parseFloat : function(t) {
      return parseFloat(t);
    }
  };
  l._sort = function() {
    var t = this.options.sortBy;
    if (t) {
      var e = [].concat.apply(t, this.sortHistory);
      var i = a$$0(e, this.options.sortAscending);
      this.filteredItems.sort(i);
      if (t != this.sortHistory[0]) {
        this.sortHistory.unshift(t);
      }
    }
  };
  l._mode = function() {
    var t = this.options.layoutMode;
    var e = this.modes[t];
    if (!e) {
      throw new Error("No layout mode: " + t);
    }
    return e.options = this.options[t], e;
  };
  l._resetLayout = function() {
    e$$2.prototype._resetLayout.call(this);
    this._mode()._resetLayout();
  };
  l._getItemLayoutPosition = function(t) {
    return this._mode()._getItemLayoutPosition(t);
  };
  l._manageStamp = function(t) {
    this._mode()._manageStamp(t);
  };
  l._getContainerSize = function() {
    return this._mode()._getContainerSize();
  };
  l.needsResizeLayout = function() {
    return this._mode().needsResizeLayout();
  };
  l.appended = function(t) {
    var e = this.addItems(t);
    if (e.length) {
      var i = this._filterRevealAdded(e);
      this.filteredItems = this.filteredItems.concat(i);
    }
  };
  l.prepended = function(t) {
    var e = this._itemize(t);
    if (e.length) {
      this._resetLayout();
      this._manageStamps();
      var i = this._filterRevealAdded(e);
      this.layoutItems(this.filteredItems);
      this.filteredItems = i.concat(this.filteredItems);
      this.items = e.concat(this.items);
    }
  };
  l._filterRevealAdded = function(t) {
    var e = this._filter(t);
    return this.hide(e.needHide), this.reveal(e.matches), this.layoutItems(e.matches, true), e.matches;
  };
  l.insert = function(t) {
    var e = this.addItems(t);
    if (e.length) {
      var i;
      var n;
      var o = e.length;
      i = 0;
      for (;o > i;i++) {
        n = e[i];
        this.element.appendChild(n.element);
      }
      var s = this._filter(e).matches;
      i = 0;
      for (;o > i;i++) {
        e[i].isLayoutInstant = true;
      }
      this.arrange();
      i = 0;
      for (;o > i;i++) {
        delete e[i].isLayoutInstant;
      }
      this.reveal(s);
    }
  };
  var c = l.remove;
  return l.remove = function(t) {
    t = o$$0.makeArray(t);
    var e = this.getItems(t);
    c.call(this, t);
    var i = e && e.length;
    var n = 0;
    for (;i && i > n;n++) {
      var s = e[n];
      o$$0.removeFrom(this.filteredItems, s);
    }
  }, l.shuffle = function() {
    var t = 0;
    for (;t < this.items.length;t++) {
      var e = this.items[t];
      e.sortData.random = Math.random();
    }
    this.options.sortBy = "random";
    this._sort();
    this._layout();
  }, l._noTransition = function(t, e) {
    var i = this.options.transitionDuration;
    this.options.transitionDuration = 0;
    var n = t.apply(this, e);
    return this.options.transitionDuration = i, n;
  }, l.getFilteredItemElements = function() {
    return this.filteredItems.map(function(t) {
      return t.element;
    });
  }, d;
});
!function(a) {
  a.fn.fitVids = function(b$$1) {
    var c$$0 = {
      customSelector : null,
      ignore : null
    };
    if (!document.getElementById("fit-vids-style")) {
      var d$$0 = document.head || document.getElementsByTagName("head")[0];
      var e$$1 = ".fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}";
      var f$$0 = document.createElement("div");
      f$$0.innerHTML = '<p>x</p><style id="fit-vids-style">' + e$$1 + "</style>";
      d$$0.appendChild(f$$0.childNodes[1]);
    }
    return b$$1 && a.extend(c$$0, b$$1), this.each(function() {
      var b$$0 = ['iframe[src*="player.vimeo.com"]', 'iframe[src*="youtube.com"]', 'iframe[src*="youtube-nocookie.com"]', 'iframe[src*="kickstarter.com"][src*="video.html"]', "object", "embed"];
      if (c$$0.customSelector) {
        b$$0.push(c$$0.customSelector);
      }
      var d = ".fitvidsignore";
      if (c$$0.ignore) {
        d = d + ", " + c$$0.ignore;
      }
      var e$$0 = a(this).find(b$$0.join(","));
      e$$0 = e$$0.not("object object");
      e$$0 = e$$0.not(d);
      e$$0.each(function() {
        var b = a(this);
        if (!(b.parents(d).length > 0 || ("embed" === this.tagName.toLowerCase() && b.parent("object").length || b.parent(".fluid-width-video-wrapper").length))) {
          if (!b.css("height")) {
            if (!b.css("width")) {
              if (!(!isNaN(b.attr("height")) && !isNaN(b.attr("width")))) {
                b.attr("height", 9);
                b.attr("width", 16);
              }
            }
          }
          var c = "object" === this.tagName.toLowerCase() || b.attr("height") && !isNaN(parseInt(b.attr("height"), 10)) ? parseInt(b.attr("height"), 10) : b.height();
          var e = isNaN(parseInt(b.attr("width"), 10)) ? b.width() : parseInt(b.attr("width"), 10);
          var f = c / e;
          if (!b.attr("name")) {
            var g = "fitvid" + a.fn.fitVids._count;
            b.attr("name", g);
            a.fn.fitVids._count++;
          }
          b.wrap('<div class="fluid-width-video-wrapper"></div>').parent(".fluid-width-video-wrapper").css("padding-top", 100 * f + "%");
          b.removeAttr("height").removeAttr("width");
        }
      });
    });
  };
  a.fn.fitVids._count = 0;
}(window.jQuery || window.Zepto);
